/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#include <Sinks/SinkCatalog.hpp>

#include <algorithm>
#include <cctype>
#include <optional>
#include <ranges>
#include <string>
#include <string_view>
#include <unordered_map>
#include <utility>
#include <vector>
#include <DataTypes/Schema.hpp>
#include <Sinks/SinkDescriptor.hpp>
#include <Util/Logger/Logger.hpp>

namespace NES
{

std::optional<Sinks::SinkDescriptor> SinkCatalog::addSinkDescriptor(
    std::string sinkName, const Schema& schema, const std::string_view sinkType, std::unordered_map<std::string, std::string> config)
{
    if (std::ranges::all_of(sinkName, [](const char character) { return std::isdigit(character); }))
    {
        /// Reserve number names for the future where we might want to have inlined sink descriptor declarations in queries again, which requires autogenerating some identifier.
        NES_DEBUG("Sink name {} is invalid, only-digit names are reserved for autogenerated names", sinkName);
        return std::nullopt;
    }
    auto descriptorConfigOpt = Sinks::SinkDescriptor::validateAndFormatConfig(sinkType, std::move(config));
    if (not descriptorConfigOpt.has_value())
    {
        return std::nullopt;
    }

    const auto lockedSinks = sinks.wlock();
    auto sinkDescriptor = Sinks::SinkDescriptor{sinkName, schema, sinkType, std::move(descriptorConfigOpt.value())};
    lockedSinks->emplace(std::move(sinkName), sinkDescriptor);
    return sinkDescriptor;
}

std::optional<Sinks::SinkDescriptor> SinkCatalog::getSinkDescriptor(const std::string& sinkName) const
{
    const auto lockedSinks = sinks.rlock();
    const auto sinkDescriptorOpt = lockedSinks->find(std::string{sinkName});
    if (sinkDescriptorOpt == lockedSinks->end())
    {
        return std::nullopt;
    }
    return sinkDescriptorOpt->second;
}

bool SinkCatalog::removeSinkDescriptor(const std::string& sinkName)
{
    const auto lockedSinks = sinks.wlock();
    return lockedSinks->erase(sinkName) == 1;
}

bool SinkCatalog::removeSinkDescriptor(const Sinks::SinkDescriptor& sinkDescriptor)
{
    const auto lockedSinks = sinks.wlock();
    return lockedSinks->erase(sinkDescriptor.sinkName) == 1;
}

bool SinkCatalog::containsSinkDescriptor(const std::string& sinkName) const
{
    const auto lockedSinks = sinks.rlock();
    return lockedSinks->contains(sinkName);
}

bool SinkCatalog::containsSinkDescriptor(const Sinks::SinkDescriptor& sinkDescriptor) const
{
    const auto lockedSinks = sinks.rlock();
    return lockedSinks->contains(sinkDescriptor.sinkName);
}

std::vector<Sinks::SinkDescriptor> SinkCatalog::getAllSinkDescriptors() const
{
    const auto lockedSinks = sinks.rlock();
    return *lockedSinks | std::ranges::views::transform([](const auto& sinkDescriptor) { return sinkDescriptor.second; })
        | std::ranges::to<std::vector>();
}
}
