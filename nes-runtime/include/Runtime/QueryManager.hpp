/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
#pragma once

#include <memory>
#include <mutex>
#include <unordered_map>
#include <Identifiers/Identifiers.hpp>
#include <Listeners/AbstractQueryStatusListener.hpp>
#include <Runtime/BufferManager.hpp>
#include <Runtime/Execution/QueryStatus.hpp>
#include <Runtime/QueryStatistics.hpp>
#include <Runtime/Reconfigurable.hpp>
#include <Runtime/ReconfigurationMessage.hpp>
#include <Runtime/RuntimeForwardRefs.hpp>
#include <Runtime/Task.hpp>
#include <Sources/SourceReturnType.hpp>
#include <Util/AtomicCounter.hpp>
#include <Util/VirtualEnableSharedFromThis.hpp>
#include <libcuckoo/cuckoohash_map.hh>

#ifdef ENABLE_PAPI_PROFILER
#    include <Runtime/Profiler/PAPIProfiler.hpp>
#endif

#include <folly/MPMCQueue.h>

namespace NES
{
class DataSource;
using DataSourcePtr = std::shared_ptr<DataSource>;

class NesWorker;
namespace Runtime
{

class ThreadPool;
using ThreadPoolPtr = std::shared_ptr<ThreadPool>; /// TODO consider moving this atomic in c++20

class AsyncTaskExecutor;
using AsyncTaskExecutorPtr = std::shared_ptr<AsyncTaskExecutor>;

class QueryManager : public detail::virtual_enable_shared_from_this<QueryManager, false>, public Reconfigurable
{
public:
    using inherited0 = detail::virtual_enable_shared_from_this<QueryManager, false>;

    using inherited1 = Reconfigurable;
    enum class QueryManagerStatus : uint8_t
    {
        Created,
        Running,
        Stopped,
        Destroyed,
        Failed
    };

    QueryManager() = delete;
    QueryManager(const QueryManager&) = delete;
    QueryManager& operator=(const QueryManager&) = delete;

    explicit QueryManager(
        std::shared_ptr<AbstractQueryStatusListener> queryStatusListener,
        std::vector<Memory::BufferManagerPtr> bufferManagers,
        WorkerId nodeEngineId,
        uint16_t numThreads,
        uint64_t numberOfBuffersPerEpoch,
        std::vector<uint64_t> workerToCoreMapping = {});

    ~QueryManager() NES_NOEXCEPT(false) override;

    /// Register a query by extracting sources, windows and sink and add them to respective map
    bool registerQuery(const Execution::ExecutableQueryPlanPtr& qep);

    /// extracts sources, windows and sinks and removes them from their respective maps
    bool unregisterQuery(const Execution::ExecutableQueryPlanPtr& qep);

    ExecutionResult processNextTask(bool ThreadPoolRunning, WorkerContext& workerContext);

    /**
     * @brief add work to the query manager, this methods is source-driven and is called
     * for each buffer generated by the window trigger
     * @param Pointer to the tuple buffer containing the data
     * @param Pointer to the pipeline stage that will be executed next
     * @param id of the queue where to put the task (only necessary if multiple queues are used, default is 0)
     */
    void addWorkForNextPipeline(Memory::TupleBuffer& buffer, Execution::SuccessorExecutablePipeline executable);

    void postReconfigurationCallback(ReconfigurationMessage& task) override;

    void reconfigure(ReconfigurationMessage&, WorkerContext& context) override;

    [[nodiscard]] Execution::QueryStatus getQueryStatus(QueryId id) const;


    [[nodiscard]] bool startQuery(const Execution::ExecutableQueryPlanPtr& qep);
    [[nodiscard]] bool stopQuery(
        const Execution::ExecutableQueryPlanPtr& qep,
        Runtime::QueryTerminationType terminationType = Runtime::QueryTerminationType::HardStop);
    bool failQuery(const Execution::ExecutableQueryPlanPtr& qep);

    /// notify all waiting threads in getWork() to wake up and finish up
    void poisonWorkers();

    /// reset query manager. After this call, it wont be possible to use the query manager.
    void destroy();

    /**
     * @brief method to return the query statistics
     * @param qep of the particular query
     * @return
     */
    [[nodiscard]] QueryStatisticsPtr getQueryStatistics(QueryId queryId);

    /**
     * Get the id of the current node
     * @return node id
     */
    [[nodiscard]] WorkerId getNodeId() const;

    /// Create an emit function that sources use to notify the QueryManager of events.
    /// 1. Data: the source filled a buffer. The QueryManager (QM) schedules a Task for the buffer.
    /// 2. EOS: the source encountered an end of stream (EOS). The QM initiates a soft end of stream and registers the source's completion.
    /// 3. STOP: the source was told to stop. The QM initiates a hard EOS and registers the source's completion.
    /// 4. FAILURE: the source failed. The QM stops all decomposed query plans that are using the source.
    Sources::SourceReturnType::EmitFunction
    createSourceEmitFunction(std::vector<Execution::SuccessorExecutablePipeline>&& executableSuccessorPipelines);

    /**
     * @brief this methods adds a reconfiguration task on the worker queue
     * @return true if the reconfiguration task was added correctly on the worker queue
     * N.B.: this does not not mean that the reconfiguration took place but it means that it
     * was scheduled to be executed!
     * @param queryId: queryId
     * @param reconfigurationDescriptor: what to do
     * @param blocking: whether to block until the reconfiguration is done. Mind this parameter because it blocks!
     */
    bool addReconfigurationMessage(QueryId queryId, const ReconfigurationMessage& reconfigurationMessage, bool blocking = false);

    [[nodiscard]] Memory::BufferManagerPtr getBufferManager() { return *bufferManagers.begin(); }

private:
    /**
     * @brief this methods adds a reconfiguration task on the worker queue
     * @return true if the reconfiguration task was added correctly on the worker queue
     * N.B.: this does not not mean that the reconfiguration took place but it means that it
     * was scheduled to be executed!
     * @param queryId: the local QEP to reconfigure
     * @param buffer: a tuple buffer storing the reconfiguration message
     * @param blocking: whether to block until the reconfiguration is done. Mind this parameter because it blocks!
     */
    bool addReconfigurationMessage(QueryId queryId, Memory::TupleBuffer&& buffer, bool blocking = false);

public:
    void notifyTaskFailure(Execution::SuccessorExecutablePipeline pipeline, const std::string& faultReason);
    void notifySourceFailure(const OriginId failedSourceOriginId, const Exception& exception);
    void notifyQueryStatusChange(const Execution::ExecutableQueryPlanPtr& qep, Execution::QueryStatus newStatus);

    /**
     * @brief get the shared query id mapped to the decomposed query plan id
     * @param queryId: the decomposed query plan id
     * @return shared query id
     */
    [[nodiscard]] QueryId getQueryId(QueryId queryId) const;

    /// introduces end of stream to all QEPs connected to this source
    /// stop types are either graceful, hard or soft
    bool addEndOfStream(
        OriginId sourceId,
        const std::vector<Execution::SuccessorExecutablePipeline>& pipelineSuccessors,
        Runtime::QueryTerminationType graceful = Runtime::QueryTerminationType::Graceful);

    bool isThreadPoolRunning() const;

    [[nodiscard]] uint64_t getNumberOfTasksInWorkerQueues() const;

    [[nodiscard]] uint64_t getCurrentTaskSum() const;

    [[nodiscard]] uint64_t getNumberOfWorkerThreads() const;

    void notifySourceCompletion(OriginId sourceId, QueryTerminationType terminationType);

    void notifyPipelineCompletion(QueryId queryId, Execution::ExecutablePipelinePtr pipeline, QueryTerminationType terminationType);

    void notifySinkCompletion(QueryId queryId, DataSinkPtr sink, QueryTerminationType terminationType);

private:
    friend class ThreadPool;
    friend class NodeEngine;

    bool startThreadPool(uint64_t numberOfBuffersPerWorker);

    folly::MPMCQueue<Task> taskQueue;

protected:
    /**
     * @brief finalize task execution by:
     * 1.) update statistics (number of processed tuples and tasks)
     * 2.) release input buffer (give back to the buffer manager)
     * @param reference to processed task
     * @oaram reference to worker context
     */
    void completedWork(Task& task, WorkerContext& workerContext);

    void updateStatistics(const Task& task, QueryId queryId, PipelineId pipelineId, WorkerContext& workerContext);

    /// Executes cleaning up logic on the task queue
    ExecutionResult terminateLoop(WorkerContext&);

    bool addSoftEndOfStream(OriginId sourceId, const std::vector<Execution::SuccessorExecutablePipeline>& pipelineSuccessors);
    bool addHardEndOfStream(OriginId sourceId, const std::vector<Execution::SuccessorExecutablePipeline>& pipelineSuccessors);
    bool addFailureEndOfStream(OriginId sourceId, const std::vector<Execution::SuccessorExecutablePipeline>& pipelineSuccessors);

    uint64_t getNextTaskId();

protected:
    WorkerId nodeEngineId;
    std::atomic_uint64_t taskIdCounter = 0;
    std::vector<Memory::BufferManagerPtr> bufferManagers;

    uint16_t numThreads;

    /// worker threads running compute tasks
    ThreadPoolPtr threadPool{nullptr};

    /// worker thread for async maintenance task, e.g., fail queryIdAndCatalogEntryMapping
    AsyncTaskExecutorPtr asyncTaskExecutor;

    std::unordered_map<QueryId, Execution::ExecutableQueryPlanPtr> runningQEPs;

    /// TODO:check if it would be better to put it in the thread context
    mutable std::mutex statisticsMutex;
    libcuckoo::cuckoohash_map<QueryId, QueryStatisticsPtr> queryToStatisticsMap;

    mutable std::mutex reconfigurationMutex;

    std::vector<uint64_t> workerToCoreMapping;
    mutable std::recursive_mutex queryMutex;

    std::atomic<QueryManagerStatus> queryManagerStatus{QueryManagerStatus::Created};

    std::vector<AtomicCounter<uint64_t>> tempCounterTasksCompleted;

    std::shared_ptr<AbstractQueryStatusListener> queryStatusListener;

    /// Todo #241: In #241, we introduce a way to uniquely identify sources globally, which we should use here to map from identifiers to sources
    std::unordered_map<OriginId, std::vector<Execution::ExecutableQueryPlanPtr>> sourceToQEPMapping;

    uint64_t numberOfBuffersPerEpoch;

#ifdef ENABLE_PAPI_PROFILER
    std::vector<Profiler::PapiCpuProfilerPtr> cpuProfilers;
#endif
};
using QueryManagerPtr = std::shared_ptr<QueryManager>;

} /// namespace Runtime
} /// namespace NES
