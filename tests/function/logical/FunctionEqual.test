# name: function/logical/FunctionEqual.test
# description: Simple function Equal tests
# groups: [Function, FunctionEqual]

Source window INT8 val_i8 INT16 val_i16 INT32 val_i32 INT64 val_i64 UINT8 val_u8 UINT16 val_u16 UINT32 val_u32 UINT64 val_u64 FLOAT32 val_f32 FLOAT64 val_f64
-42, -129,-32769,-2147483649,42, 256,65536,4294967296,23.3,42.42

# Since equals is commutative, e.g., 'val_i8 == val_f32' equals 'val_f32 == val_i8', so we check only one direction.
# Check if different numeric types support the equals operation
SELECT
    val_i8 == 42 AS val_i8,
    val_i16 == 42 AS val_i16,
    val_i32 == 42 AS val_i32,
    val_i64 == 42 AS val_i64,

    val_u8 == 42_U AS val_u8,
    val_u16 == 42_U AS val_u16,
    val_u32 == 42_U AS val_u32,
    val_u64 == 42_U AS val_u64,

    val_f32 == 42.42_F AS val_f32,
    val_f64 == 42.42_D AS val_f64
FROM window INTO SINK
----
0,0,0,0,1,0,0,0,0,1

# Equal i8 value with all other data types
SELECT
    # signed
    val_i8 == val_i8 AS val_i8_i8,
    val_i8 == val_i8 + 1 AS val_i8_i8_plus_1,
    val_i8 == val_i16 AS val_i8_i16,
    val_i8 == val_i16 + 1 AS val_i8_i16_plus_1,
    val_i8 == val_i32 AS val_i8_i32,
    val_i8 == val_i32 + 1 AS val_i8_i32_plus_1,
    val_i8 == val_i64 AS val_i8_i64,
    val_i8 == val_i64 + 1 AS val_i8_i64_plus_1,
    # unsigned
    val_i8 == val_u8 AS val_i8_u8,
    val_i8 == val_u8 + 1_U AS val_i8_u8_plus_1,
    val_i8 == val_u16 AS val_i8_u16,
    val_i8 == val_u16 + 1_U AS val_i8_u16_plus_1,
    val_i8 == val_u32 AS val_i8_u32,
    val_i8 == val_u32 + 1_U AS val_i8_u32_plus_1,
    val_i8 == val_u64 AS val_i8_u64,
    val_i8 == val_u64 + 1_U AS val_i8_u64_plus_1,
    # float
    val_i8 == val_f32 AS val_i8_f32_,
    val_i8 == val_f32 + 1_F AS val_i8_f32_plus_1,
    val_i8 == val_f64 AS val_i8_f64,
    val_i8 == val_f64 + 1_D AS val_i8_f64_plus_1
FROM window INTO SINK
----
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

# Equal i16 value with all other data types
SELECT
    # signed
    val_i16 == val_i8 AS val_i16_i8,
    val_i16 == val_i8 + 1 AS val_i16_i8_plus_1,
    val_i16 == val_i16 AS val_i16_i16,
    val_i16 == val_i16 + 1 AS val_i16_i16_plus_1,
    val_i16 == val_i32 AS val_i16_i32,
    val_i16 == val_i32 + 1 AS val_i16_i32_plus_1,
    val_i16 == val_i64 AS val_i16_i64,
    val_i16 == val_i64 + 1 AS val_i16_i64_plus_1,
    # unsigned
    val_i16 == val_u8 AS val_i16_u8,
    val_i16 == val_u8 + 1_U AS val_i16_u8_plus_1,
    val_i16 == val_u16 AS val_i16_u16,
    val_i16 == val_u16 + 1_U AS val_i16_u16_plus_1,
    val_i16 == val_u32 AS val_i16_u32,
    val_i16 == val_u32 + 1_U AS val_i16_u32_plus_1,
    val_i16 == val_u64 AS val_i16_u64,
    val_i16 == val_u64 + 1_U AS val_i16_u64_plus_1,
    # float
    val_i16 == val_f32 AS val_i16_f32,
    val_i16 == val_f32 + 1_F AS val_i16_f32_plus_1,
    val_i16 == val_f64 AS val_i16_f64,
    val_i16 == val_f64 + 1_D AS val_i16_f64_plus_1
FROM window INTO SINK
----
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

# Equal i32 value with all other data types
SELECT
    # signed
    val_i32 == val_i8 AS val_i32_i8,
    val_i32 == val_i8 + 1 AS val_i32_i8_plus_1,
    val_i32 == val_i16 AS val_i32_i16,
    val_i32 == val_i16 + 1 AS val_i32_i16_plus_1,
    val_i32 == val_i32 AS val_i32_i32,
    val_i32 == val_i32 + 1 AS val_i32_i32_plus_1,
    val_i32 == val_i64 AS val_i32_i64,
    val_i32 == val_i64 + 1 AS val_i32_i64_plus_1,
    # unsigned
    val_i32 == val_u8 AS val_i32_u8,
    val_i32 == val_u8 + 1_U AS val_i32_u8_plus_1,
    val_i32 == val_u16 AS val_i32_u16,
    val_i32 == val_u16 + 1_U AS val_i32_u16_plus_1,
    val_i32 == val_u32 AS val_i32_u32,
    val_i32 == val_u32 + 1_U AS val_i32_u32_plus_1,
    val_i32 == val_u64 AS val_i32_u64,
    val_i32 == val_u64 + 1_U AS val_i32_u64_plus_1,
    # float
    val_i32 == val_f32 AS val_i32_f32,
    val_i32 == val_f32 + 1_F AS val_i32_f32_plus_1,
    val_i32 == val_f64 AS val_i32_f64,
    val_i32 == val_f64 + 1_D AS val_i32_f64_plus_1
FROM window INTO SINK
----
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

# Equal i64 value with all other data types
SELECT
    # signed
    val_i64 == val_i8 AS val_i64_i8,
    val_i64 == val_i8 + 1 AS val_i64_i8_plus_1,
    val_i64 == val_i16 AS val_i64_i16,
    val_i64 == val_i16 + 1 AS val_i64_i16_plus_1,
    val_i64 == val_i32 AS val_i64_i32,
    val_i64 == val_i32 + 1 AS val_i64_i32_plus_1,
    val_i64 == val_i64 AS val_i64_i64,
    val_i64 == val_i64 + 1 AS val_i64_i64_plus_1,
    # unsigned
    val_i64 == val_u8 AS val_i64_u8,
    val_i64 == val_u8 + 1_U AS val_i64_u8_plus_1,
    val_i64 == val_u16 AS val_i64_u16,
    val_i64 == val_u16 + 1_U AS val_i64_u16_plus_1,
    val_i64 == val_u32 AS val_i64_u32,
    val_i64 == val_u32 + 1_U AS val_i64_u32_plus_1,
    val_i64 == val_u64 AS val_i64_u64,
    val_i64 == val_u64 + 1_U AS val_i64_u64_plus_1,
    # float
    val_i64 == val_f32 AS val_i64_f32,
    val_i64 == val_f32 + 1_F AS val_i64_f32_plus_1,
    val_i64 == val_f64 AS val_i64_f64,
    val_i64 == val_f64 + 1_D AS val_i64_f64_plus_1
FROM window INTO SINK
----
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
