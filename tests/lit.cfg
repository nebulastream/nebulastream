# -*- Python -*-
# Global configuration file for `vanilla` system level tests
# More information on lit:
# - https://llvm.org/docs/CommandGuide/lit.html
# - https://llvm.org/docs/TestingGuide.html
# - https://github.com/llvm/llvm-project/blob/main/llvm/utils/lit/lit/cl_arguments.py

import os
import site
import subprocess
import socket
from contextlib import closing
import lit.formats

if "PYLINT_IMPORT" in os.environ:
    config = object()

config.name = "System level test"

# suffixes: file extensions to treat as test files.
config.suffixes = [".test"]

# test_format: The test format to use to interpret tests. Here interpret RUN as Shell command.
config.test_format = lit.formats.ShTest(True)

worker = lit_config.params.get("WORKER_BINARY", None)
client = lit_config.params.get("CLIENT_BINARY", None)
if worker is None or client is None:
    raise ValueError("WORKER_BINARY and CLIENT_BINARY must be set")

free_port = None
with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as s:
    s.bind(('', 0))
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    free_port = s.getsockname()[1]
worker_address = "localhost:" + str(free_port)

# SUBSTITUTIONS
# Substitutes the sink to to write to a temporary file
# In the future, we might want to add variants of this to support different sink types here
config.substitutions.append(("%sink", r'sink(FileSinkDescriptor::create(\"%tsink\", \"CSV_FORMAT\", \"APPEND\"));'))

# Substitutes to the client binary
config.substitutions.append(("%client", client))

# Substitutes to the worker address
# In the future, we might want to change the address based on the worker that is deployed (e.g. with test coverage)
config.substitutions.append(("%worker_address", worker_address))

# Substitutes to the test data directory
config.substitutions.append(("%testdata", os.getcwd() + "/test/testdata"))

# Substitutes to the result checker
config.substitutions.append(("%result_checker", "python3 " + os.getcwd() + "/test/result_checker.py"))

# Start the worker
subprocess.Popen([worker, "--grpc=" + worker_address])
