diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2f6c623df..bdb84b3eb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -6,6 +6,11 @@ set(CMAKE_CXX_STANDARD 20)
 # Currently there is a dependency on BOOST-MPL
 find_package(Boost REQUIRED)
 
+configure_file(
+        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/folly-config.h.cmake
+        ${CMAKE_CURRENT_BINARY_DIR}/config/folly/folly-config.h
+)
+
 add_library(nesfolly
         folly/SharedMutex.cpp
         folly/ScopeGuard.cpp
@@ -34,12 +39,13 @@ target_compile_features(nesfolly PRIVATE cxx_std_20)
 target_include_directories(nesfolly PUBLIC
         ${Boost_INCLUDE_DIRS}
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/config>)
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/config>)
 
 include(GNUInstallDirs)
 include(CMakePackageConfigHelpers)
 
-# Config
+include(cmake/FollyConfigChecks.cmake)
+
 configure_package_config_file(cmake/config.cmake
         ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake # cmake-build-debug/
         INSTALL_DESTINATION ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME} NO_SET_AND_CHECK_MACRO) # share/
@@ -247,5 +253,5 @@ install(FILES ${container} DESTINATION "${include_dest}/container")
 install(FILES ${system} DESTINATION "${include_dest}/system")
 install(FILES ${chrono} DESTINATION "${include_dest}/chrono")
 install(FILES ${memory_detail} DESTINATION "${include_dest}/memory/detail")
-install(FILES "config/folly/folly-config.h" DESTINATION "${include_dest}")
+install(FILES "${CMAKE_CURRENT_BINARY_DIR}/config/folly/folly-config.h" DESTINATION "${include_dest}")
 install(FILES "folly/stub/logging.h" DESTINATION "${include_dest}/stub")
diff --git a/cmake/FollyConfigChecks.cmake b/cmake/FollyConfigChecks.cmake
new file mode 100644
index 000000000..57b9e3f05
--- /dev/null
+++ b/cmake/FollyConfigChecks.cmake
@@ -0,0 +1,182 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+include(CheckCXXSourceCompiles)
+include(CheckCXXSourceRuns)
+include(CheckFunctionExists)
+include(CheckIncludeFileCXX)
+include(CheckSymbolExists)
+include(CheckTypeSize)
+include(CheckCXXCompilerFlag)
+
+if (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
+    CHECK_INCLUDE_FILE_CXX(malloc_np.h FOLLY_USE_JEMALLOC)
+else()
+    CHECK_INCLUDE_FILE_CXX(jemalloc/jemalloc.h FOLLY_USE_JEMALLOC)
+endif()
+
+if(NOT CMAKE_SYSTEM_NAME STREQUAL "Windows")
+    # clang only rejects unknown warning flags if -Werror=unknown-warning-option
+    # is also specified.
+    check_cxx_compiler_flag(
+            -Werror=unknown-warning-option
+            COMPILER_HAS_UNKNOWN_WARNING_OPTION)
+    if (COMPILER_HAS_UNKNOWN_WARNING_OPTION)
+        set(CMAKE_REQUIRED_FLAGS
+                "${CMAKE_REQUIRED_FLAGS} -Werror=unknown-warning-option")
+    endif()
+
+    check_cxx_compiler_flag(-Wshadow-local COMPILER_HAS_W_SHADOW_LOCAL)
+    check_cxx_compiler_flag(
+            -Wshadow-compatible-local
+            COMPILER_HAS_W_SHADOW_COMPATIBLE_LOCAL)
+    if (COMPILER_HAS_W_SHADOW_LOCAL AND COMPILER_HAS_W_SHADOW_COMPATIBLE_LOCAL)
+        set(FOLLY_HAVE_SHADOW_LOCAL_WARNINGS ON)
+        list(APPEND FOLLY_CXX_FLAGS -Wshadow-compatible-local)
+    endif()
+
+    check_cxx_compiler_flag(-Wnoexcept-type COMPILER_HAS_W_NOEXCEPT_TYPE)
+    if (COMPILER_HAS_W_NOEXCEPT_TYPE)
+        list(APPEND FOLLY_CXX_FLAGS -Wno-noexcept-type)
+    endif()
+
+    check_cxx_compiler_flag(
+            -Wnullability-completeness
+            COMPILER_HAS_W_NULLABILITY_COMPLETENESS)
+    if (COMPILER_HAS_W_NULLABILITY_COMPLETENESS)
+        list(APPEND FOLLY_CXX_FLAGS -Wno-nullability-completeness)
+    endif()
+
+    check_cxx_compiler_flag(
+            -Winconsistent-missing-override
+            COMPILER_HAS_W_INCONSISTENT_MISSING_OVERRIDE)
+    if (COMPILER_HAS_W_INCONSISTENT_MISSING_OVERRIDE)
+        list(APPEND FOLLY_CXX_FLAGS -Wno-inconsistent-missing-override)
+    endif()
+
+    check_cxx_compiler_flag(-faligned-new COMPILER_HAS_F_ALIGNED_NEW)
+    if (COMPILER_HAS_F_ALIGNED_NEW)
+        list(APPEND FOLLY_CXX_FLAGS -faligned-new)
+    endif()
+
+    check_cxx_compiler_flag(-fopenmp COMPILER_HAS_F_OPENMP)
+    if (COMPILER_HAS_F_OPENMP)
+        list(APPEND FOLLY_CXX_FLAGS -fopenmp)
+    endif()
+endif()
+
+set(FOLLY_ORIGINAL_CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS}")
+string(REGEX REPLACE
+        "-std=(c|gnu)\\+\\+.."
+        ""
+        CMAKE_REQUIRED_FLAGS
+        "${CMAKE_REQUIRED_FLAGS}")
+
+check_symbol_exists(pthread_atfork pthread.h FOLLY_HAVE_PTHREAD_ATFORK)
+
+list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)
+check_symbol_exists(accept4 sys/socket.h FOLLY_HAVE_ACCEPT4)
+check_symbol_exists(getrandom sys/random.h FOLLY_HAVE_GETRANDOM)
+check_symbol_exists(preadv sys/uio.h FOLLY_HAVE_PREADV)
+check_symbol_exists(pwritev sys/uio.h FOLLY_HAVE_PWRITEV)
+check_symbol_exists(clock_gettime time.h FOLLY_HAVE_CLOCK_GETTIME)
+check_symbol_exists(pipe2 unistd.h FOLLY_HAVE_PIPE2)
+check_symbol_exists(sendmmsg sys/socket.h FOLLY_HAVE_SENDMMSG)
+check_symbol_exists(recvmmsg sys/socket.h FOLLY_HAVE_RECVMMSG)
+
+check_function_exists(malloc_usable_size FOLLY_HAVE_MALLOC_USABLE_SIZE)
+
+set(CMAKE_REQUIRED_FLAGS "${FOLLY_ORIGINAL_CMAKE_REQUIRED_FLAGS}")
+
+check_cxx_source_compiles("
+  #pragma GCC diagnostic error \"-Wattributes\"
+  extern \"C\" void (*test_ifunc(void))() { return 0; }
+  void func() __attribute__((ifunc(\"test_ifunc\")));
+  int main() { return 0; }"
+        FOLLY_HAVE_IFUNC
+)
+check_cxx_source_runs("
+  int main(int, char**) {
+    char buf[64] = {0};
+    unsigned long *ptr = (unsigned long *)(buf + 1);
+    *ptr = 0xdeadbeef;
+    return (*ptr & 0xff) == 0xef ? 0 : 1;
+  }"
+        FOLLY_HAVE_UNALIGNED_ACCESS
+)
+check_cxx_source_compiles("
+  int main(int argc, char** argv) {
+    unsigned size = argc;
+    char data[size];
+    return 0;
+  }"
+        FOLLY_HAVE_VLA
+)
+check_cxx_source_runs("
+  extern \"C\" int folly_example_undefined_weak_symbol() __attribute__((weak));
+  int main(int argc, char** argv) {
+    auto f = folly_example_undefined_weak_symbol; // null pointer
+    return f ? f() : 0; // must compile, link, and run with null pointer
+  }"
+        FOLLY_HAVE_WEAK_SYMBOLS
+)
+check_cxx_source_runs("
+  #include <dlfcn.h>
+  int main() {
+    void *h = dlopen(\"linux-vdso.so.1\", RTLD_LAZY | RTLD_LOCAL | RTLD_NOLOAD);
+    if (h == nullptr) {
+      return -1;
+    }
+    dlclose(h);
+    return 0;
+  }"
+        FOLLY_HAVE_LINUX_VDSO
+)
+
+check_cxx_source_runs("
+  #include <cstddef>
+  #include <cwchar>
+  int main(int argc, char** argv) {
+    return wcstol(L\"01\", nullptr, 10) == 1 ? 0 : 1;
+  }"
+        FOLLY_HAVE_WCHAR_SUPPORT
+)
+
+check_cxx_source_compiles("
+  #include <ext/random>
+  int main(int argc, char** argv) {
+    __gnu_cxx::sfmt19937 rng;
+    return 0;
+  }"
+        FOLLY_HAVE_EXTRANDOM_SFMT19937
+)
+
+check_cxx_source_runs("
+  #include <stdarg.h>
+  #include <stdio.h>
+
+  int call_vsnprintf(const char* fmt, ...) {
+    char buf[256];
+    va_list ap;
+    va_start(ap, fmt);
+    int result = vsnprintf(buf, sizeof(buf), fmt, ap);
+    va_end(ap);
+    return result;
+  }
+
+  int main(int argc, char** argv) {
+    return call_vsnprintf(\"%\", 1) < 0 ? 0 : 1;
+  }"
+        HAVE_VSNPRINTF_ERRORS
+)
\ No newline at end of file
diff --git a/cmake/folly-config.h.cmake b/cmake/folly-config.h.cmake
new file mode 100644
index 000000000..3572d73eb
--- /dev/null
+++ b/cmake/folly-config.h.cmake
@@ -0,0 +1,89 @@
+/*
+* Copyright (c) Facebook, Inc. and its affiliates.
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+#pragma once
+
+#if !defined(FOLLY_MOBILE)
+#if defined(__ANDROID__) || \
+(defined(__APPLE__) &&  \
+     (TARGET_IPHONE_SIMULATOR || TARGET_OS_SIMULATOR || TARGET_OS_IPHONE))
+#define FOLLY_MOBILE 1
+#else
+#define FOLLY_MOBILE 0
+#endif
+#endif // FOLLY_MOBILE
+
+#cmakedefine FOLLY_HAVE_PTHREAD 1
+#cmakedefine FOLLY_HAVE_PTHREAD_ATFORK 1
+
+#cmakedefine FOLLY_HAVE_LIBGFLAGS 1
+#cmakedefine FOLLY_UNUSUAL_GFLAGS_NAMESPACE 1
+#cmakedefine FOLLY_GFLAGS_NAMESPACE @FOLLY_GFLAGS_NAMESPACE@
+
+#cmakedefine FOLLY_HAVE_LIBGLOG 1
+
+#cmakedefine FOLLY_USE_JEMALLOC 1
+#cmakedefine FOLLY_USE_LIBSTDCPP 1
+
+#if __has_include(<features.h>)
+#include <features.h>
+#endif
+
+#cmakedefine FOLLY_HAVE_ACCEPT4 1
+#cmakedefine01 FOLLY_HAVE_GETRANDOM
+#cmakedefine FOLLY_HAVE_PREADV 1
+#cmakedefine FOLLY_HAVE_PWRITEV 1
+#cmakedefine FOLLY_HAVE_CLOCK_GETTIME 1
+#cmakedefine FOLLY_HAVE_PIPE2 1
+#cmakedefine FOLLY_HAVE_SENDMMSG 1
+#cmakedefine FOLLY_HAVE_RECVMMSG 1
+#cmakedefine FOLLY_HAVE_OPENSSL_ASN1_TIME_DIFF 1
+
+#cmakedefine FOLLY_HAVE_IFUNC 1
+#cmakedefine FOLLY_HAVE_STD__IS_TRIVIALLY_COPYABLE 1
+#cmakedefine FOLLY_HAVE_UNALIGNED_ACCESS 1
+#cmakedefine FOLLY_HAVE_VLA 1
+#cmakedefine FOLLY_HAVE_WEAK_SYMBOLS 1
+#cmakedefine FOLLY_HAVE_LINUX_VDSO 1
+#cmakedefine FOLLY_HAVE_MALLOC_USABLE_SIZE 1
+#cmakedefine FOLLY_HAVE_INT128_T 1
+#cmakedefine FOLLY_HAVE_WCHAR_SUPPORT 1
+#cmakedefine FOLLY_HAVE_EXTRANDOM_SFMT19937 1
+#cmakedefine FOLLY_USE_LIBCPP 1
+#cmakedefine HAVE_VSNPRINTF_ERRORS 1
+
+#cmakedefine FOLLY_HAVE_LIBUNWIND 1
+#cmakedefine FOLLY_HAVE_DWARF 1
+#cmakedefine FOLLY_HAVE_ELF 1
+#cmakedefine FOLLY_HAVE_SWAPCONTEXT 1
+#cmakedefine FOLLY_HAVE_BACKTRACE 1
+#cmakedefine FOLLY_USE_SYMBOLIZER 1
+#define FOLLY_DEMANGLE_MAX_SYMBOL_SIZE 1024
+
+#cmakedefine FOLLY_HAVE_SHADOW_LOCAL_WARNINGS 1
+
+#cmakedefine FOLLY_HAVE_LIBLZ4 1
+#cmakedefine FOLLY_HAVE_LIBLZMA 1
+#cmakedefine FOLLY_HAVE_LIBSNAPPY 1
+#cmakedefine FOLLY_HAVE_LIBZ 1
+#cmakedefine FOLLY_HAVE_LIBZSTD 1
+#cmakedefine FOLLY_HAVE_LIBBZ2 1
+
+#cmakedefine01 FOLLY_LIBRARY_SANITIZE_ADDRESS
+
+#cmakedefine FOLLY_SUPPORT_SHARED_LIBRARY 1
+
+#cmakedefine01 FOLLY_HAVE_LIBRT
\ No newline at end of file
diff --git a/config/folly/folly-config.h b/config/folly/folly-config.h
deleted file mode 100644
index ecc99b2a8..000000000
--- a/config/folly/folly-config.h
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#ifdef __APPLE__
-#include <TargetConditionals.h> // @manual
-#endif
-
-#if !defined(FOLLY_MOBILE)
-#if defined(__ANDROID__) || \
-    (defined(__APPLE__) &&  \
-     (TARGET_IPHONE_SIMULATOR || TARGET_OS_SIMULATOR || TARGET_OS_IPHONE))
-#define FOLLY_MOBILE 1
-#else
-#define FOLLY_MOBILE 0
-#endif
-#endif // FOLLY_MOBILE
-
-#define FOLLY_HAVE_PTHREAD 1
-#define FOLLY_HAVE_PTHREAD_ATFORK 1
-
-#define FOLLY_HAVE_LIBGFLAGS 0
-/* #undef FOLLY_UNUSUAL_GFLAGS_NAMESPACE */
-#define FOLLY_GFLAGS_NAMESPACE gflags
-
-#define FOLLY_HAVE_LIBGLOG 0
-
-/* #undef FOLLY_USE_JEMALLOC */
-
-#if __has_include(<features.h>)
-#include <features.h>
-#endif
-
-#define FOLLY_HAVE_ACCEPT4 1
-#define FOLLY_HAVE_GETRANDOM 1
-#define FOLLY_HAVE_PREADV 1
-#define FOLLY_HAVE_PWRITEV 1
-#define FOLLY_HAVE_CLOCK_GETTIME 1
-#define FOLLY_HAVE_PIPE2 1
-#define FOLLY_HAVE_SENDMMSG 1
-#define FOLLY_HAVE_RECVMMSG 1
-/* #undef FOLLY_HAVE_OPENSSL_ASN1_TIME_DIFF */
-
-#define FOLLY_HAVE_IFUNC 1
-#define FOLLY_HAVE_STD__IS_TRIVIALLY_COPYABLE 1
-#define FOLLY_HAVE_UNALIGNED_ACCESS 1
-#define FOLLY_HAVE_VLA 1
-#define FOLLY_HAVE_WEAK_SYMBOLS 1
-#define FOLLY_HAVE_LINUX_VDSO 1
-#define FOLLY_HAVE_MALLOC_USABLE_SIZE 1
-/* #undef FOLLY_HAVE_INT128_T */
-#define FOLLY_HAVE_WCHAR_SUPPORT 1
-#define FOLLY_HAVE_EXTRANDOM_SFMT19937 1
-#define HAVE_VSNPRINTF_ERRORS 1
-
-/* #undef FOLLY_HAVE_LIBUNWIND */
-// #define FOLLY_HAVE_DWARF 1
-// #define FOLLY_HAVE_ELF 1
-// #define FOLLY_HAVE_SWAPCONTEXT 1
-// #define FOLLY_HAVE_BACKTRACE 1
-// #define FOLLY_USE_SYMBOLIZER 1
-// #define FOLLY_DEMANGLE_MAX_SYMBOL_SIZE 1024
-
-/* #undef FOLLY_HAVE_SHADOW_LOCAL_WARNINGS */
-
-// #define FOLLY_HAVE_LIBLZ4 1
-/* #undef FOLLY_HAVE_LIBLZMA */
-// #define FOLLY_HAVE_LIBSNAPPY 1
-// #define FOLLY_HAVE_LIBZ 1
-// #define FOLLY_HAVE_LIBZSTD 1
-/* #undef FOLLY_HAVE_LIBBZ2 */
-
-#define FOLLY_LIBRARY_SANITIZE_ADDRESS 0
-
-/* #undef FOLLY_SUPPORT_SHARED_LIBRARY */
-
-#define FOLLY_HAVE_LIBRT 0
-#define FOLLY_CFG_NO_COROUTINES 1
\ No newline at end of file

