Subject: [PATCH] WIP

Signed-off-by: Nils Schubert <nilslpschubert@gmail.com>
---
Index: nautilus/src/nautilus/compiler/backends/mlir/MLIRLoweringProvider.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nautilus/src/nautilus/compiler/backends/mlir/MLIRLoweringProvider.cpp b/nautilus/src/nautilus/compiler/backends/mlir/MLIRLoweringProvider.cpp
--- a/nautilus/src/nautilus/compiler/backends/mlir/MLIRLoweringProvider.cpp	(revision a48e9513def6000b49717a5e8dce954511b1e649)
+++ b/nautilus/src/nautilus/compiler/backends/mlir/MLIRLoweringProvider.cpp	(date 1733989531929)
@@ -498,23 +498,23 @@
 	}
 }
 
-void MLIRLoweringProvider::generateMLIR(ir::ModOperation* divIntOp, ValueFrame& frame) {
-	auto leftInput = frame.getValue(divIntOp->getLeftInput()->getIdentifier());
-	auto rightInput = frame.getValue(divIntOp->getRightInput()->getIdentifier());
+void MLIRLoweringProvider::generateMLIR(ir::ModOperation* modIntOp, ValueFrame& frame) {
+	auto leftInput = frame.getValue(modIntOp->getLeftInput()->getIdentifier());
+	auto rightInput = frame.getValue(modIntOp->getRightInput()->getIdentifier());
 	auto resultType = leftInput.getType();
-	if (isFloat(divIntOp->getStamp())) {
+	if (isFloat(modIntOp->getStamp())) {
 		auto mlirDivOp = builder->create<mlir::LLVM::FRemOp>(getNameLoc("binOpResult"), resultType, leftInput,
 		                                                     rightInput, mlir::LLVM::FastmathFlags::fast);
-		frame.setValue(divIntOp->getIdentifier(), mlirDivOp);
+		frame.setValue(modIntOp->getIdentifier(), mlirDivOp);
 	} else {
-		if (resultType.isSignedInteger()) {
+		if (isSignedInteger(modIntOp->getStamp())) {
 			auto mlirDivOp =
-			    builder->create<mlir::arith::RemSIOp>(getNameLoc("binOpResult"), resultType, leftInput, rightInput);
-			frame.setValue(divIntOp->getIdentifier(), mlirDivOp);
+			builder->create<mlir::arith::RemSIOp>(getNameLoc("binOpResult"), resultType, leftInput, rightInput);
+			frame.setValue(modIntOp->getIdentifier(), mlirDivOp);
 		} else {
 			auto mlirDivOp =
-			    builder->create<mlir::arith::RemUIOp>(getNameLoc("binOpResult"), resultType, leftInput, rightInput);
-			frame.setValue(divIntOp->getIdentifier(), mlirDivOp);
+			builder->create<mlir::arith::RemUIOp>(getNameLoc("binOpResult"), resultType, leftInput, rightInput);
+			frame.setValue(modIntOp->getIdentifier(), mlirDivOp);
 		}
 	}
 }
