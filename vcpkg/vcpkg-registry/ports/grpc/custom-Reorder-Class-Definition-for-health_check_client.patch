From dab985bb76c84dfa1a955478582cbd84e2af8716 Mon Sep 17 00:00:00 2001
From: lukas schwerdtfeger <lukas.schwerdtfeger@gmail.com>
Date: Thu, 31 Oct 2024 17:05:08 +0100
Subject: [PATCH] Reorder Class Definition for health_check_client

---
 .../lb_policy/health_check_client.cc          | 122 +++++++++---------
 1 file changed, 61 insertions(+), 61 deletions(-)

diff --git a/src/core/ext/filters/client_channel/lb_policy/health_check_client.cc b/src/core/ext/filters/client_channel/lb_policy/health_check_client.cc
index c33d23d991..e4847fe93e 100644
--- a/src/core/ext/filters/client_channel/lb_policy/health_check_client.cc
+++ b/src/core/ext/filters/client_channel/lb_policy/health_check_client.cc
@@ -147,67 +147,6 @@ void HealthProducer::HealthChecker::OnConnectivityStateChangeLocked(
   }
 }
 
-void HealthProducer::HealthChecker::StartHealthStreamLocked() {
-  if (GRPC_TRACE_FLAG_ENABLED(grpc_health_check_client_trace)) {
-    gpr_log(GPR_INFO,
-            "HealthProducer %p HealthChecker %p: "
-            "creating HealthClient for \"%s\"",
-            producer_.get(), this,
-            std::string(health_check_service_name_).c_str());
-  }
-  stream_client_ = MakeOrphanable<SubchannelStreamClient>(
-      producer_->connected_subchannel_, producer_->subchannel_->pollset_set(),
-      std::make_unique<HealthStreamEventHandler>(Ref()),
-      GRPC_TRACE_FLAG_ENABLED(grpc_health_check_client_trace) ? "HealthClient"
-                                                              : nullptr);
-}
-
-void HealthProducer::HealthChecker::NotifyWatchersLocked(
-    grpc_connectivity_state state, absl::Status status) {
-  if (GRPC_TRACE_FLAG_ENABLED(grpc_health_check_client_trace)) {
-    gpr_log(
-        GPR_INFO,
-        "HealthProducer %p HealthChecker %p: reporting state %s to watchers",
-        producer_.get(), this, ConnectivityStateName(state));
-  }
-  work_serializer_->Schedule(
-      [self = Ref(), state, status = std::move(status)]() {
-        MutexLock lock(&self->producer_->mu_);
-        for (HealthWatcher* watcher : self->watchers_) {
-          watcher->Notify(state, status);
-        }
-      },
-      DEBUG_LOCATION);
-  new AsyncWorkSerializerDrainer(work_serializer_);
-}
-
-void HealthProducer::HealthChecker::OnHealthWatchStatusChange(
-    grpc_connectivity_state state, const absl::Status& status) {
-  if (state == GRPC_CHANNEL_SHUTDOWN) return;
-  // Prepend the subchannel's address to the status if needed.
-  absl::Status use_status;
-  if (!status.ok()) {
-    std::string address_str =
-        grpc_sockaddr_to_uri(&producer_->subchannel_->address())
-            .value_or("<unknown address type>");
-    use_status = absl::Status(
-        status.code(), absl::StrCat(address_str, ": ", status.message()));
-  }
-  work_serializer_->Schedule(
-      [self = Ref(), state, status = std::move(use_status)]() mutable {
-        MutexLock lock(&self->producer_->mu_);
-        if (self->stream_client_ != nullptr) {
-          self->state_ = state;
-          self->status_ = std::move(status);
-          for (HealthWatcher* watcher : self->watchers_) {
-            watcher->Notify(state, self->status_);
-          }
-        }
-      },
-      DEBUG_LOCATION);
-  new AsyncWorkSerializerDrainer(work_serializer_);
-}
-
 //
 // HealthProducer::HealthChecker::HealthStreamEventHandler
 //
@@ -317,6 +256,67 @@ class HealthProducer::HealthChecker::HealthStreamEventHandler
   RefCountedPtr<HealthChecker> health_checker_;
 };
 
+void HealthProducer::HealthChecker::StartHealthStreamLocked() {
+  if (GRPC_TRACE_FLAG_ENABLED(grpc_health_check_client_trace)) {
+    gpr_log(GPR_INFO,
+            "HealthProducer %p HealthChecker %p: "
+            "creating HealthClient for \"%s\"",
+            producer_.get(), this,
+            std::string(health_check_service_name_).c_str());
+  }
+  stream_client_ = MakeOrphanable<SubchannelStreamClient>(
+      producer_->connected_subchannel_, producer_->subchannel_->pollset_set(),
+      std::make_unique<HealthStreamEventHandler>(Ref()),
+      GRPC_TRACE_FLAG_ENABLED(grpc_health_check_client_trace) ? "HealthClient"
+                                                              : nullptr);
+}
+
+void HealthProducer::HealthChecker::NotifyWatchersLocked(
+    grpc_connectivity_state state, absl::Status status) {
+  if (GRPC_TRACE_FLAG_ENABLED(grpc_health_check_client_trace)) {
+    gpr_log(
+        GPR_INFO,
+        "HealthProducer %p HealthChecker %p: reporting state %s to watchers",
+        producer_.get(), this, ConnectivityStateName(state));
+  }
+  work_serializer_->Schedule(
+      [self = Ref(), state, status = std::move(status)]() {
+        MutexLock lock(&self->producer_->mu_);
+        for (HealthWatcher* watcher : self->watchers_) {
+          watcher->Notify(state, status);
+        }
+      },
+      DEBUG_LOCATION);
+  new AsyncWorkSerializerDrainer(work_serializer_);
+}
+
+void HealthProducer::HealthChecker::OnHealthWatchStatusChange(
+    grpc_connectivity_state state, const absl::Status& status) {
+  if (state == GRPC_CHANNEL_SHUTDOWN) return;
+  // Prepend the subchannel's address to the status if needed.
+  absl::Status use_status;
+  if (!status.ok()) {
+    std::string address_str =
+        grpc_sockaddr_to_uri(&producer_->subchannel_->address())
+            .value_or("<unknown address type>");
+    use_status = absl::Status(
+        status.code(), absl::StrCat(address_str, ": ", status.message()));
+  }
+  work_serializer_->Schedule(
+      [self = Ref(), state, status = std::move(use_status)]() mutable {
+        MutexLock lock(&self->producer_->mu_);
+        if (self->stream_client_ != nullptr) {
+          self->state_ = state;
+          self->status_ = std::move(status);
+          for (HealthWatcher* watcher : self->watchers_) {
+            watcher->Notify(state, self->status_);
+          }
+        }
+      },
+      DEBUG_LOCATION);
+  new AsyncWorkSerializerDrainer(work_serializer_);
+}
+
 //
 // HealthProducer::ConnectivityWatcher
 //
-- 
2.39.2

