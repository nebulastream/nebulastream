/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";

import "SerializableDataType.proto";
import "SerializableOperator.proto";
import "SerializableSchema.proto";
import "SerializableVariantDescriptor.proto";

package NES;

message FConstantValueLF {
    oneof value {
        int32 int_value = 1;
        uint32 uint_value = 2;
        int64 long_value = 3;
        uint64 ulong_value = 4;
        bool bool_value = 5;
        fixed32 char_value = 6;  // Represents a single byte (0-255). We need a fixed32 as protobuf does only support fixed32/fixed64.
        float float_value = 7;
        double double_value = 8;
        string string_value = 9;
    }
}

message FFieldAccLF {
    string fieldName = 1;
    SerializableDataType dataType = 2;
}

message FValue {
    oneof value {
        FFieldAccLF fieldAccess = 1;
        FConstantValueLF const = 2;
    }
}

message FComparison {
    FValue left = 1;
    FValue right = 2;
    enum Type {
        LT = 0;
        LE = 1;
        GE = 2;
        GT = 3;
    }
}

message FPredicate {
    FValue left = 1;
    FValue right = 2;
    FComparison cmp = 3;
}

message FSelect { FPredicate predicate = 1; }

message FUnaryOp {
    FOp child = 1;
    oneof value {
        FSelect select = 2;
    }
}

message FJoin {
    FPredicate joinFunction = 1;
    WindowInfos windowInfos = 2;
    enum JoinType {
        INNER_JOIN = 0;
        CARTESIAN_PRODUCT = 1;
    }
    JoinType joinType = 3;
}

message FUnion { }

message FBinaryOp{
    FOp left = 1;
    FOp right = 2;
    oneof value {
        FJoin join = 3;
        FUnion union = 4;
    }
    SerializableSchema leftSchema = 5;
    SerializableSchema rightSchema = 6;
    SerializableSchema outputSchema = 7;
}

message FOp {
    oneof value {
        SerializableSourceDescriptor source = 1;
        FBinaryOp binOp = 2;
        FUnaryOp unOp = 3;
    }
}

message FSinkOp{
    oneof child {
        SerializableSourceDescriptor source = 1;
        FBinaryOp binOp = 2;
        FUnaryOp unOp = 3;
    }
    SerializableSinkDescriptor sinkDescriptor = 4;
}

message FQueryPlan{
    repeated FSinkOp rootOperators = 1;
}
