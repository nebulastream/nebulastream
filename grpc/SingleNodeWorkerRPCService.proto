/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "SerializableQueryPlan.proto";
import "google/protobuf/empty.proto";

service WorkerRPCService {
  rpc RegisterQuery (RegisterQueryRequest) returns (RegisterQueryReply) {}
  rpc UnregisterQuery (UnregisterQueryRequest) returns (google.protobuf.Empty) {}

  rpc StartQuery (StartQueryRequest) returns (google.protobuf.Empty) {}
  rpc StopQuery (StopQueryRequest) returns (google.protobuf.Empty) {}

  rpc RequestQuerySummary (QuerySummaryRequest) returns (QuerySummaryReply) {}
  rpc RequestQueryLog (QueryLogRequest) returns (QueryLogReply) {}
  rpc RequestStatus (WorkerStatusRequest) returns (WorkerStatusResponse) {}
}

message RegisterQueryRequest {
  NES.SerializableQueryPlan queryPlan = 1;
}

message RegisterQueryReply {
  uint64 queryId = 1;
}

message UnregisterQueryRequest {
  uint64 queryId = 1;
}

message StartQueryRequest {
  uint64 queryId = 1;
}

message StopQueryRequest {
    enum QueryTerminationType {Graceful = 0; HardStop = 1; Failure = 2; Invalid = 3;};
    uint64 queryId = 2;
    QueryTerminationType terminationType = 3;
}

enum QueryStatus {
    Registered = 0;
    Started = 1;
    Running = 2;
    Stopped = 3;
    Failed = 4;
}

message Error {
    uint64 code = 1;
    string message = 2;
    string stackTrace = 3; /// currently untyped
    string location = 4; /// currently untyped
}

message QuerySummaryRequest {
  uint64 queryId = 1;
}

message QueryRunSummary {
   uint64 startUnixTimeInMs = 1;
   uint64 runningUnixTimeInMs = 2;
   uint64 stopUnixTimeInMs = 3;
   optional Error error = 4;
}

message QuerySummaryReply {
    uint64 queryId = 1;
    QueryStatus status = 2;
    repeated QueryRunSummary runs = 3;
}

message QueryLogRequest {
    uint64 queryId = 1;
}

message QueryLogEntry {
    QueryStatus status = 1;
    uint64 unixTimeInMs = 2;
    optional Error error = 3;
}

message QueryLogReply {
    repeated QueryLogEntry entries = 1;
}

message WorkerStatusRequest {
    uint64 afterUnixTimestampInMs = 1;
}

message WorkerStatusResponse {
    message ActiveQuery {
        uint64 queryId = 1;
        uint64 startedUnixTimestampInMs = 2;
    }

    message TerminatedQuery {
        uint64 queryId = 1;
        uint64 startedUnixTimestampInMs = 2;
        uint64 terminatedUnixTimestampInMs = 3;
        optional Error error = 4;
    }

    uint64 afterUnixTimestampInMs = 3;
    repeated ActiveQuery activeQueries = 1;
    repeated TerminatedQuery terminatedQueries = 2;
}
