/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "SerializableVariantDescriptor.proto";
import "SerializableSchema.proto";
import "SerializableTrait.proto";
package NES;

message SerializableParserConfig {
  string type = 1;
  string tupleDelimiter = 2;
  string fieldDelimiter = 3;
};

message SerializableSinkDescriptor
{
  SerializableSchema sinkSchema = 1;
  string sinkType = 2;
  bool addTimestamp = 3;
  map<string, SerializableVariantDescriptor> config = 4;
}

message SerializableSourceDescriptor
{
  uint64 physicalSourceId = 1;
  string logicalSourceName = 2;
  SerializableSchema sourceSchema = 3;
  uint64 workerId = 4;
  string sourceType = 5;
  int32 numberOfBuffersInLocalPool = 6;
  SerializableParserConfig parserConfig = 7;
  map<string, SerializableVariantDescriptor> config = 8;
}

message SerializableSourceDescriptorLogicalOperator
{
  uint64 sourceOriginId = 1;
  SerializableSourceDescriptor sourceDescriptor = 2;
}

message SerializableSinkLogicalOperator
{
  SerializableSinkDescriptor sinkDescriptor = 1;
}

message SerializableLogicalOperator {
  string operator_type = 1;
  SerializableTraitSet trait_set = 2;
  SerializableSchema output_schema = 3;
  repeated SerializableSchema input_schemas = 4;
  message OriginList {
    repeated uint64 origin_ids = 1;
  }
  repeated OriginList input_origin_lists = 5;
  repeated uint64 output_origin_ids = 6;
}

message SerializableOperator
{
  uint64 operator_id = 1;
  repeated int64 children_ids = 2;
  map<string, SerializableVariantDescriptor> config = 3;
  oneof value {
    SerializableSourceDescriptorLogicalOperator source = 4;
    SerializableSinkLogicalOperator sink = 5;
    SerializableLogicalOperator operator = 6;
  }
}
