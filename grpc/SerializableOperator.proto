/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

syntax = "proto3";
import "google/protobuf/any.proto";
import "SerializableExpression.proto";
import "SerializableSchema.proto";
package NES;

/**
The serializable wrapper for the nes partition object
 */
message NesPartition {
  uint64 queryId = 1;
  uint64 operatorId = 2;
  uint64 partitionId = 3;
  uint64 subpartitionId = 4;
}

/**
The serializable wrapper for the node location object
 */
message NodeLocation {
  uint64 nodeId = 1;
  string hostname = 2;
  uint32 port = 3;
}

/**
The serializable wrapper for the source config object
 */
message SerializablePhysicalSourceType{
  enum InputFormat{
      JSON = 0;
      CSV = 1;
      NES_BINARY = 2;
  };

  enum TCPDecideMessageSize{
      TUPLE_SEPARATOR = 0;
      USER_SPECIFIED_BUFFER_SIZE = 1;
      BUFFER_SIZE_FROM_SOCKET = 2;
  }

  /**
  The serializable wrapper for the csv source config object
  */
  message SerializableCSVSourceType{

    string filePath = 1;
    bool skipHeader = 2;
    string delimiter = 3;
    uint32 numberOfBuffersToProduce = 4;
    uint32 numberOfTuplesToProducePerBuffer = 5;
  }

  /**
  The serializable wrapper for the tcp source config object
  */
  message SerializableTCPSourceType{
    string socketHost = 1;
    uint32 socketPort = 2;
    uint32 socketDomain = 3;
    uint32 socketType = 4;
    float flushIntervalMS = 6;
    InputFormat inputFormat = 7;
    TCPDecideMessageSize tcpDecideMessageSize = 8;
    string tupleSeparator = 9;
    uint32 socketBufferSize = 10;
    uint32 bytesUsedForSocketBufferSizeTransfer = 11;
  }

  string sourceType = 1;
  string logicalSourceName = 2;
  google.protobuf.Any specificPhysicalSourceType = 4;
}

/*
The serializable wrapper definition for operator nodes
 */
message SerializableOperator{

  /**
  Source Details contains properties for the source operator, such as the source descriptor
   */
  message SourceDetails {

    message SerializableCsvSourceDescriptor {
      SerializablePhysicalSourceType physicalSourceType = 1;
      SerializableSchema sourceSchema = 2;
    }

    message SerializableLogicalSourceDescriptor {
      string logicalSourceName = 1;
      string sourceName = 2;
      optional SerializableSchema sourceSchema = 3;
    }

    message SerializableTCPSourceDescriptor {
      SerializablePhysicalSourceType physicalSourceType = 1;
      SerializableSchema sourceSchema = 2;
    }

    google.protobuf.Any sourceDescriptor = 1;
    uint64 sourceOriginId = 2;
  }

  /**
  Sink Details contains properties for the sink operator, such as the sink descriptor
  */
  message SinkDetails {
    message SerializableFileSinkDescriptor {
      string filePath = 1;
      bool append = 2;
      string sinkFormat = 3;
      bool addTimestamp = 4;
    }

    message SerializablePrintSinkDescriptor {
    }

    google.protobuf.Any sinkDescriptor = 1;
    uint64 numberOfOriginIds = 3;
  }

  /**
    WatermarkAssignerDetail contains properties for the watermark assigner, such as watermark field and delay for
    event time watermark
   */
  message WatermarkStrategyDetails {
    message SerializableEventTimeWatermarkStrategyDescriptor {
      SerializableExpression onField = 1;
      uint64 allowedLateness = 2;
      uint64 multiplier = 3;
    }

    message SerializableIngestionTimeWatermarkStrategyDescriptor {
    }
    google.protobuf.Any strategy = 1;
  }

    /**
      LimitDetails contains properties for the limit operator
     */
    message LimitDetails {
        uint64 limit = 1;
    }

  /**
   Map Details contains properties for the map operator, such as the field assignment expression
   */
  message MapDetails {
    SerializableExpression expression = 1;
  }

  /**
   CEPIteration Details contains properties for the CEPIteration operator, such as the field assignment minIteration and maxIteration
   */
  message CEPIterationDetails {
    uint64 minIteration = 1;
    uint64 maxIteration = 2;
  }

  /**
  Projection Details contains properties for the projection operator, i.e., the output schema
  */
  message ProjectionDetails {
    repeated SerializableExpression expression = 1;

  }
  /**
   Union Details contains properties for the union operator, which is empty currently.
   */
  message UnionDetails {}

  /**
   Broadcast details contains properties for the broadcast operator
   */
  message BroadcastDetails{}

  /**
   Filter Details contains properties for the filter operator, such as the filter predicate expression
   */
  message FilterDetails {
    SerializableExpression predicate = 1;
    float selectivity = 2;
  }

  /**
  Rename details contain the new name of the source.
   */
  message RenameDetails {
    string newSourceName = 1;
  }

  /**
 InferModelDetails contains the model file for the inference
 */
  message InferModelDetails {
    repeated SerializableExpression inputFields = 1;
    repeated SerializableExpression outputFields = 2;
    string mlFileName = 3;
    bytes mlFileContent = 4;
  }

  /**
    Properties of distribution characteristic
  */
  message DistributionCharacteristic {
    enum Distribution{
      // `Unset' indicates that the logical operator has just been deserialized from a client.
      // The deserialization logic in the coordinator will change it to `Complete' to be inline with the creation
      // logic in `Query::window' and `Query::windowByKey'.
      // TODO This logic should be revisited when #2884 is fixed.
      Unset = 0;
      Complete = 1;
      Slicing = 2;
      Combining = 3;
      Merging = 4;
    }
    Distribution distr = 1;
  }

  /**
    Time Characteristic contains properties for the time characteristics
  */
  message TimeCharacteristic {
    enum Type{
      EventTime = 0;
      IngestionTime = 1;
    }
    Type type = 1;
    string field = 2;
    uint64 multiplier = 3;
  }

  /**
    Properties of a tumbling window
  */
  message TumblingWindow {
    TimeCharacteristic timeCharacteristic = 1;
    uint32 size = 2;
  }

  /**
    Properties of a sliding window
  */
  message SlidingWindow {
    TimeCharacteristic timeCharacteristic = 1;
    uint32 size = 2;
    uint32 slide = 3;
  }

  /**
    Properties of a threshold window
  */
  message ThresholdWindow {
    SerializableExpression predicate = 1;
    uint32 minimumCount = 2;
  }

  /**
    Window Details contains properties for the window operator
  */
  message WindowDetails {

    message Aggregation {
      enum Type{
        SUM = 0;
        MAX = 1;
        MIN = 2;
        COUNT = 3;
        AVG = 4;
        MEDIAN = 5;
      }
      Type type = 1;
      SerializableExpression onField = 2;
      SerializableExpression asField = 3;
    }

    google.protobuf.Any windowType = 1;
    repeated Aggregation windowAggregations = 2;
    DistributionCharacteristic distrChar = 3;
    repeated SerializableExpression keys = 4;
    uint64 allowedLateness = 5;
    uint64 origin = 6;
  }

  /**
    Join Details contains properties for the join operator
  */
  message JoinDetails {

    message JoinTypeCharacteristic {
      enum JoinType{
        INNER_JOIN = 0;
        CARTESIAN_PRODUCT = 1;
      }
      JoinType jointype = 1;
    }

    google.protobuf.Any windowType = 1;
    DistributionCharacteristic distrChar = 2;
    SerializableExpression joinExpression = 3;
    uint64 numberOfInputEdgesLeft = 4;
    uint64 numberOfInputEdgesRight = 5;
    JoinTypeCharacteristic jointype = 6;
    string windowStartFieldName = 7;
    string windowEndFieldName = 8;
    uint64 origin = 9;
  }

  /**
    Batch Join Details contains properties for the batch join operator
  */
  message BatchJoinDetails {
    SerializableExpression onBuildKey = 1;
    SerializableExpression onProbeKey = 2;
    SerializableExpression buildSchema = 3;
    SerializableExpression probeSchema = 4;
    uint64 numberOfInputEdgesBuild = 5;
    uint64 numberOfInputEdgesProbe = 6;
  }

  google.protobuf.Any details = 1;
  repeated uint64 childrenIds = 2;
  SerializableSchema inputSchema = 3;
  SerializableSchema outputSchema = 4;
  SerializableSchema leftInputSchema = 5;
  SerializableSchema rightInputSchema = 6;
  uint64 operatorId = 7;
  repeated uint64 originIds = 8;
  repeated uint64 leftOriginIds = 9;
  repeated uint64 rightOriginIds = 10;
}
