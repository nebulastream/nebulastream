# name: function/arithmetical/FunctionMul.test
# description: Simple function mul tests
# groups: [Function, FunctionMul]

Source window INT8 val_i8 INT16 val_i16 INT32 val_i32 INT64 val_i64 UINT8 val_u8 UINT16 val_u16 UINT32 val_u32 UINT64 val_u64 FLOAT32 val_f32 FLOAT64 val_f64
-42,-129,-32769,-2147483649,42,256,65536,4294967296,23,23

# Todo #442: the below system level tests currently perform downcasts.
# Since equals is commutative, e.g., 'val_i8 * val_f32' equals 'val_f32 * val_i8', so we check only one direction.

# Check if different numeric types support the equals operation
SELECT
    val_i8 * 42 AS val_i8,
    val_i16 * 42 AS val_i16,
    val_i32 * 42 AS val_i32,
    val_i64 * 42 AS val_i64,

    val_u8 * 42_U AS val_u8,
    val_u16 * 42_U AS val_u16,
    val_u32 * 42_U AS val_u32,
    val_u64 * 42_U AS val_u64,

    val_f32 * 42_U AS val_f32,
    val_f64 * 42_U AS val_f64
FROM window INTO SINK
----
-1764 -5418 -1376298 -90194313258 1764 10752 2752512 180388626432 966.000000 966.000000

# Equal i8 value with all other data types
SELECT
    # signed
    val_i8 * val_i8 AS val_i8_i8,
    val_i8 * (val_i8 + 1) AS val_i8_i8_plus_1,
    val_i8 * val_i16 AS val_i8_i16,
    val_i8 * (val_i16 + 1) AS val_i8_i16_plus_1,
    val_i8 * val_i32 AS val_i8_i32,
    val_i8 * (val_i32 + 1) AS val_i8_i32_plus_1,
    val_i8 * val_i64 AS val_i8_i64,
    val_i8 * (val_i64 + 1) AS val_i8_i64_plus_1,
    # unsigned
    val_i8 * val_u8 AS val_i8_u8,
    val_i8 * (val_u8 + 1_U) AS val_i8_u8_plus_1,
    val_i8 * val_u16 AS val_i8_u16,
    val_i8 * (val_u16 + 1_U) AS val_i8_u16_plus_1,
    val_i8 * val_u32 AS val_i8_u32,
    val_i8 * (val_u32 + 1_U) AS val_i8_u32_plus_1,
    val_i8 * val_u64 AS val_i8_u64,
    val_i8 * (val_u64 + 1_U) AS val_i8_u64_plus_1,
    # float
    val_i8 * val_f32 AS val_i8_f32_,
    val_i8 * (val_f32 + 1_F) AS val_i8_f32_plus_1,
    val_i8 * val_f64 AS val_i8_f64,
    val_i8 * (val_f64 + 1_D) AS val_i8_f64_plus_1
FROM window INTO SINK
----
-28 -70 42 0 42 0 42 0 28 -14 0 -42 0 -42 0 -42 0 0 0 0

# Equal i16 value with all other data types
SELECT
    # signed
    val_i16 * val_i8 AS val_i16_i8,
    val_i16 * (val_i8 + 1) AS val_i16_i8_plus_1,
    val_i16 * val_i16 AS val_i16_i16,
    val_i16 * (val_i16 + 1) AS val_i16_i16_plus_1,
    val_i16 * val_i32 AS val_i16_i32,
    val_i16 * (val_i32 + 1) AS val_i16_i32_plus_1,
    val_i16 * val_i64 AS val_i16_i64,
    val_i16 * (val_i64 + 1) AS val_i16_i64_plus_1,
    # unsigned
    val_i16 * val_u8 AS val_i16_u8,
    val_i16 * (val_u8 + 1_U) AS val_i16_u8_plus_1,
    val_i16 * val_u16 AS val_i16_u16,
    val_i16 * (val_u16 + 1_U) AS val_i16_u16_plus_1,
    val_i16 * val_u32 AS val_i16_u32,
    val_i16 * (val_u32 + 1_U) AS val_i16_u32_plus_1,
    val_i16 * val_u64 AS val_i16_u64,
    val_i16 * (val_u64 + 1_U) AS val_i16_u64_plus_1,
    # float
    val_i16 * val_f32 AS val_i16_f32_,
    val_i16 * (val_f32 + 1_F) AS val_i16_f32_plus_1,
    val_i16 * val_f64 AS val_i16_f64,
    val_i16 * (val_f64 + 1_D) AS val_i16_f64_plus_1
FROM window INTO SINK
----
5418 5289 16641 16512 -32639 -32768 129 0 -5418 -5547 32512 32383 0 -129 0 -129 28672 -32768 0 0

# Equal i32 value with all other data types
SELECT
    # signed
    val_i32 * val_i8 AS val_i32_i8,
    val_i32 * (val_i8 + 1) AS val_i32_i8_plus_1,
    val_i32 * val_i16 AS val_i32_i16,
    val_i32 * (val_i16 + 1) AS val_i32_i16_plus_1,
    val_i32 * val_i32 AS val_i32_i32,
    val_i32 * (val_i32 + 1) AS val_i32_i32_plus_1,
    val_i32 * val_i64 AS val_i32_i64,
    val_i32 * (val_i64 + 1) AS val_i32_i64_plus_1,
    # unsigned
    val_i32 * val_u8 AS val_i32_u8,
    val_i32 * (val_u8 + 1_U) AS val_i32_u8_plus_1,
    val_i32 * val_u16 AS val_i32_u16,
    val_i32 * (val_u16 + 1_U) AS val_i32_u16_plus_1,
    val_i32 * val_u32 AS val_i32_u32,
    val_i32 * (val_u32 + 1_U) AS val_i32_u32_plus_1,
    val_i32 * val_u64 AS val_i32_u64,
    val_i32 * (val_u64 + 1_U) AS val_i32_u64_plus_1,
    # float
    val_i32 * val_f32 AS val_i32_f32_,
    val_i32 * (val_f32 + 1_F) AS val_i32_f32_plus_1,
    val_i32 * val_f64 AS val_i32_f64,
    val_i32 * (val_f64 + 1_D) AS val_i32_f64_plus_1
FROM window INTO SINK
----
1376298 1343529 4227201 4194432 1073807361 1073774592 -2147450879 -2147483648 -1376298 -1409067 -8388864 -8421633 2147418112 2147385343 0 -32769 -919076496 -918552192 0 0

# Equal i64 value with all other data types
SELECT
    # signed
    val_i64 * val_i8 AS val_i64_i8,
    val_i64 * (val_i8 + 1) AS val_i64_i8_plus_1,
    val_i64 * val_i16 AS val_i64_i16,
    val_i64 * (val_i16 + 1) AS val_i64_i16_plus_1,
    val_i64 * val_i32 AS val_i64_i32,
    val_i64 * (val_i32 + 1) AS val_i64_i32_plus_1,
    val_i64 * val_i64 AS val_i64_i64,
    val_i64 * (val_i64 + 1) AS val_i64_i64_plus_1,
    # unsigned
    val_i64 * val_u8 AS val_i64_u8,
    val_i64 * (val_u8 + 1_U) AS val_i64_u8_plus_1,
    val_i64 * val_u16 AS val_i64_u16,
    val_i64 * (val_u16 + 1_U) AS val_i64_u16_plus_1,
    val_i64 * val_u32 AS val_i64_u32,
    val_i64 * (val_u32 + 1_U) AS val_i64_u32_plus_1,
    val_i64 * val_u64 AS val_i64_u64,
    val_i64 * (val_u64 + 1_U) AS val_i64_u64_plus_1,
    # float
    val_i64 * val_f32 AS val_i64_f32_,
    val_i64 * (val_f32 + 1_F) AS val_i64_f32_plus_1,
    val_i64 * val_f64 AS val_i64_f64,
    val_i64 * (val_f64 + 1_D) AS val_i64_f64_plus_1
FROM window INTO SINK
----
90194313258 88046829609 277025390721 274877907072 70370891694081 70368744210432 4611686022722355201 4611686020574871552 -90194313258 -92341796907 -549755814144 -551903297793 -140737488420864 -140739635904513 9223372032559808512 9223372030412324863 3510108160 3510632448 -4456593306256801792 -4456311831279960064
