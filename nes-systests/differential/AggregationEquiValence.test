# name: differential/AggregationEquivalence.test
# description: Ensure differential queries agree for logically equivalent aggregation
# groups: [Differential, Aggregation]

CREATE LOGICAL SOURCE stream(id UINT64, value UINT64, timestamp UINT64);
CREATE PHYSICAL SOURCE FOR stream TYPE Generator SET(
    1 AS `SOURCE`.SEED,
    1000 AS `SOURCE`.MAX_RUNTIME_MS,
    'ALL' as `SOURCE`.STOP_GENERATOR_WHEN_SEQUENCE_FINISHES,
    'SEQUENCE UINT64 1 5 1, SEQUENCE UINT64 10 50 10, SEQUENCE UINT64 0 20000 5000' AS `SOURCE`.GENERATOR_SCHEMA
);

CREATE SINK sinkStream(stream.start UINT64, stream.end UINT64, stream.id UINT64, stream.sumValue UINT64) TYPE File;

SELECT start, end, id, SUM(value) AS sumValue
FROM (
  SELECT id, start, SUM(value) AS value
  FROM stream
  GROUP BY id
  WINDOW TUMBLING (timestamp, size 5 sec)
)
GROUP BY id
WINDOW SLIDING (start, size 10 sec, advance by 5 sec)
INTO sinkStream;
====
SELECT start, end, id, SUM(value) AS sumValue
FROM stream
GROUP BY id
WINDOW SLIDING (timestamp, size 10 sec, advance by 5 sec)
INTO sinkStream;
