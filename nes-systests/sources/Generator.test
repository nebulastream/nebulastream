# name: sources/Generator.test
# description: Tests the generator source
# groups: [Sources, Generator]

CREATE LOGICAL SOURCE generatorDefault(id UINT64, field2 UINT64);
CREATE PHYSICAL SOURCE FOR generatorDefault TYPE Generator SET(
       'ALL' as `SOURCE`.STOP_GENERATOR_WHEN_SEQUENCE_FINISHES,
       1000000 AS `SOURCE`.MAX_RUNTIME_MS,
       1 AS `SOURCE`.SEED,
       'SEQUENCE UINT64 0 10 1, SEQUENCE UINT64 0 5 1' AS `SOURCE`.GENERATOR_SCHEMA
);

CREATE LOGICAL SOURCE generatorDifferentDataTypes(field1 UINT64, field2 UINT32, field3 UINT16, field4 UINT8, field5 INT64, field6 INT32, field7 INT16, field8 INT8, field9 FLOAT64, field10 FLOAT32);
CREATE PHYSICAL SOURCE FOR generatorDifferentDataTypes TYPE Generator SET(
       'ALL' as `SOURCE`.STOP_GENERATOR_WHEN_SEQUENCE_FINISHES,
       1000000 AS `SOURCE`.MAX_RUNTIME_MS,
       'FIXED' AS `SOURCE`.GENERATOR_RATE_TYPE,
       'emit_rate 1000' AS `SOURCE`.GENERATOR_RATE_CONFIG,
       1 AS `SOURCE`.SEED,
       'SEQUENCE UINT64 0 10 1, SEQUENCE UINT32 0 9 1, SEQUENCE UINT16 0 8 1, SEQUENCE UINT8 0 7 1, SEQUENCE INT64 0 6 1, SEQUENCE INT32 0 5 1, SEQUENCE INT16 0 4 1, SEQUENCE INT8 0 3 1, SEQUENCE FLOAT64 0 2 1, SEQUENCE FLOAT32 0 1 1'
       AS `SOURCE`.GENERATOR_SCHEMA
);

CREATE LOGICAL SOURCE generator10K(id UINT64, field2 UINT64);
CREATE PHYSICAL SOURCE FOR generator10K TYPE Generator SET(
       'ALL' as `SOURCE`.STOP_GENERATOR_WHEN_SEQUENCE_FINISHES,
       1000000 AS `SOURCE`.MAX_RUNTIME_MS,
       1 AS `SOURCE`.SEED,
       'FIXED' AS `SOURCE`.GENERATOR_RATE_TYPE,
       'emit_rate 1000' AS `SOURCE`.GENERATOR_RATE_CONFIG,
       'SEQUENCE UINT64 0 10000 1, SEQUENCE UINT64 0 100 1' AS `SOURCE`.GENERATOR_SCHEMA
);

CREATE LOGICAL SOURCE generator10KSinus(id UINT64, field2 UINT64);
CREATE PHYSICAL SOURCE FOR generator10KSinus TYPE Generator SET(
       'ALL' as `SOURCE`.STOP_GENERATOR_WHEN_SEQUENCE_FINISHES,
       1000000 AS `SOURCE`.MAX_RUNTIME_MS,
       1 AS `SOURCE`.SEED,
       'SINUS' AS `SOURCE`.GENERATOR_RATE_TYPE,
       'amplitude 1000, frequency 2' AS `SOURCE`.GENERATOR_RATE_CONFIG,
       'SEQUENCE UINT64 0 10000 1, SEQUENCE UINT64 0 100 1' AS `SOURCE`.GENERATOR_SCHEMA
);

CREATE LOGICAL SOURCE generatorStopAll(id UINT64, field2 UINT64);
CREATE PHYSICAL SOURCE FOR generatorStopAll TYPE Generator SET(
       'ALL' as `SOURCE`.STOP_GENERATOR_WHEN_SEQUENCE_FINISHES,
       1000000 AS `SOURCE`.MAX_RUNTIME_MS,
       1 AS `SOURCE`.SEED,
       'SEQUENCE UINT64 0 100 1, SEQUENCE UINT64 0 200 1' AS `SOURCE`.GENERATOR_SCHEMA
);

CREATE LOGICAL SOURCE generatorStopOne(id UINT64, field2 UINT64);
CREATE PHYSICAL SOURCE FOR generatorStopOne TYPE Generator SET(
       'ONE' as `SOURCE`.STOP_GENERATOR_WHEN_SEQUENCE_FINISHES,
       1000000 AS `SOURCE`.MAX_RUNTIME_MS,
       1 AS `SOURCE`.SEED,
       'SEQUENCE UINT64 0 100 1, SEQUENCE UINT64 0 200 1' AS `SOURCE`.GENERATOR_SCHEMA
);

CREATE LOGICAL SOURCE generatorInline(id UINT64);
CREATE PHYSICAL SOURCE FOR generatorInline TYPE Generator SET(
       'ALL' as `SOURCE`.STOP_GENERATOR_WHEN_SEQUENCE_FINISHES,
       1000 AS `SOURCE`.MAX_RUNTIME_MS,
       1 AS `SOURCE`.SEED,
       'SEQUENCE UINT64 0 10 1' AS `SOURCE`.GENERATOR_SCHEMA
);


CREATE SINK generator_sink(generatorDefault.id UINT64, generatorDefault.field2 UINT64) TYPE File;
CREATE SINK generator_data_types_sink(generatorDifferentDataTypes.field1 UINT64, generatorDifferentDataTypes.field2 UINT32, generatorDifferentDataTypes.field3 UINT16, generatorDifferentDataTypes.field4 UINT8, generatorDifferentDataTypes.field5 INT64, generatorDifferentDataTypes.field6 INT32, generatorDifferentDataTypes.field7 INT16, generatorDifferentDataTypes.field8 INT8, generatorDifferentDataTypes.field9 FLOAT64, generatorDifferentDataTypes.field10 FLOAT32) TYPE File;
CREATE SINK checksum_10K_Sinus(generator10KSinus.id UINT64,generator10KSinus.field2 UINT64) TYPE Checksum;
CREATE SINK checksum_10K(generator10K.id UINT64, generator10K.field2 UINT64) TYPE Checksum;
CREATE SINK stop_all_checksum(generatorStopAll.id UINT64, generatorStopAll.field2 UINT64) TYPE Checksum;
CREATE SINK stop_one_checksum(generatorStopOne.id UINT64, generatorStopOne.field2 UINT64) TYPE Checksum;
CREATE SINK generator_sink_inline(generatorInline.id UINT64) TYPE File;

SELECT * FROM generatorDefault INTO generator_sink;
----
0 0
1 1
2 2
3 3
4 4
5 5
6 5
7 5
8 5
9 5

SELECT * FROM generatorDifferentDataTypes INTO generator_data_types_sink;
----
0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1
2 2 2 2 2 2 2 2 2 1
3 3 3 3 3 3 3 3 2 1
4 4 4 4 4 4 4 3 2 1
5 5 5 5 5 5 4 3 2 1
6 6 6 6 6 5 4 3 2 1
7 7 7 7 6 5 4 3 2 1
8 8 8 7 6 5 4 3 2 1
9 9 8 7 6 5 4 3 2 1



SELECT * FROM generator10K INTO checksum_10K;
----
10000 4032240

SELECT * FROM generator10KSinus INTO checksum_10K_Sinus;
----
10000 4032240

SELECT * FROM generatorStopAll INTO stop_all_checksum;
----
200 60740

SELECT * FROM generatorStopOne INTO stop_one_checksum;
----
100 25440

SELECT * FROM generatorInline INTO generator_sink_inline;
----
0
1
2
3
4
5
6
7
8
9
