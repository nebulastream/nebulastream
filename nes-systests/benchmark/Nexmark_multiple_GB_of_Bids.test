# name: milestone/Nexmark_multiple_GB_of_Bids.test
# description: Nexmark benchmark taken from https://github.com/nexmark/nexmark/tree/master/nexmark-flink/src/main/resources/queries
# We have used https://github.com/risingwavelabs/nexmark-rs to generate the source csv files
# groups: [milestone, benchmark, large, Aggregation, Join]

# Source definition. We have removed some columns that are not needed in our queries
CREATE LOGICAL SOURCE bid(timestamp UINT64, auctionId INT32, bidder INT32, price FLOAT64);
CREATE PHYSICAL SOURCE FOR bid TYPE File;
ATTACH FILE large/nexmark/bid_6GB.csv

CREATE LOGICAL SOURCE auction(timestamp UINT64, id INT32, initialbid INT32, reserve INT32, expires UINT64, seller INT32, category INT32);
CREATE PHYSICAL SOURCE FOR auction TYPE File;
ATTACH FILE large/nexmark/auction_707MB.csv

CREATE LOGICAL SOURCE person(id INT32, name VARSIZED, email_address VARSIZED, credit_card VARSIZED, city VARSIZED, state VARSIZED, timestamp UINT64, extra VARSIZED);
CREATE PHYSICAL SOURCE FOR person TYPE File;
ATTACH FILE large/nexmark/person_840MB.csv

CREATE SINK bidCheckSum(bid.timestamp UINT64, bid.auctionId INT32, bid.bidder INT32, bid.price FLOAT64)  TYPE Checksum;
CREATE SINK q1CheckSum(bid.timestamp UINT64, bid.auctionId INT32, bid.bidder INT32, price FLOAT64)  TYPE Checksum;
CREATE SINK q2CheckSum(bid.auctionId INT32, bid.price FLOAT64)  TYPE Checksum;
CREATE SINK q5Checksum(bidbid.start UINT64, bidbid.end UINT64, bid.auctionId INT32, bid.num UINT64, bid.max_tmp UINT64)  TYPE Checksum;
CREATE SINK q8CheckSum(personauction.start UINT64, personauction.end UINT64, person.id INT32, person.name VARSIZED)  TYPE Checksum;
CREATE SINK q8VariantCheckSum(bidauction.start UINT64, bidauction.end UINT64, bid.timestamp UINT64, bid.auctionId INT32, bid.bidder INT32, bid.price FLOAT64, bid.timestamp UINT64, auction.id INT32, auction.initialbid INT32, auction.reserve INT32, auction.expires UINT64, auction.seller INT32, auction.category INT32)  TYPE Checksum;


# Query 0
SELECT * FROM bid INTO bidCheckSum;
----
183991721 353216217968

# Query 1
SELECT timestamp, auctionId, bidder, price * FLOAT64(908) / FLOAT64(1000) AS price FROM bid INTO q1CheckSum;
----
183991721 370730288260

# Query 2
SELECT auctionId, price FROM bid WHERE auctionId % INT32(123) = INT32(0) INTO q2CheckSum;
----
1511777 1211558031

# Query 5
SELECT start, end, auctionId, num, max_tmp
FROM (SELECT auctionId, COUNT(auctionId) AS num, start, end
      FROM bid
      GROUP BY auctionId
      WINDOW SLIDING(timestamp, SIZE 10 SEC, ADVANCE BY 2 SEC))
INNER JOIN (SELECT MAX(num_ids) AS max_tmp, start, end
              FROM
                    (SELECT auctionId, COUNT(auctionId) AS num_ids, start
                     FROM bid
                     GROUP BY auctionId
                     WINDOW SLIDING(timestamp, SIZE 10 SEC, ADVANCE BY 2 SEC))
              WINDOW TUMBLING(start, SIZE 2 SEC))
ON num == max_tmp
WINDOW TUMBLING(start, SIZE 2 SEC)
INTO q5Checksum;
----
10589 23372488


# Query 8
# Until PR #755 is not merged, we need to do another subquery to project the required fields
SELECT start, end, id, name
FROM (
        SELECT *
            FROM (SELECT * FROM person)
        INNER JOIN
            (SELECT * FROM auction)
        ON id = seller WINDOW TUMBLING (timestamp, size 10 sec)
    )
INTO q8CheckSum;
----
10999751 33652579169


# Query 8 Variant (We are not using the actual Q8 but a variant, as we have swapped the Person stream with the Bid stream)
SELECT start, end, timestamp, auctionId, bidder, price, timestamp, id, initialbid, reserve, expires, seller, category
    FROM (SELECT * FROM bid)
INNER JOIN
    (SELECT * FROM auction)
ON auctionId = id WINDOW TUMBLING (timestamp, size 10 sec) INTO q8VariantCheckSum;
----
182197843 1176742157900
