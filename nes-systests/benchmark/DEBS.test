# name: milestone/DEBS.test
# description: Queries from our DEBS tutorial
# groups: [milestone, benchmark, large]

# Source definitions
Source solarPanels INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 timestamp FILE
TESTDATA/large/debs/SOLAR_PANELS_TOPIC_1G.csv

Source windTurbines INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 timestamp FILE
TESTDATA/large/debs/WIND_TURBINES_TOPIC_5M.csv

Source consumers INT32 consumerId INT32 sectorId FLOAT64 consumedPower VARSIZED consumerType UINT64 timestamp FILE
TESTDATA/large/debs/CONSUMERS_TOPIC_1G.csv

SINK consumersChecksum TYPE Checksum INT32 consumers$consumerId INT32 consumers$sectorId FLOAT64 consumers$consumedPower VARSIZED consumers$consumerType UINT64 consumers$timestamp
SINK solarPanelsChecksum TYPE Checksum INT32 solarPanels$producerId INT32 solarPanels$groupId FLOAT64 solarPanels$producedPower UINT64 solarPanels$timestamp
SINK q4Checksum TYPE Checksum FLOAT64 consumedPower
SINK q5Checksum TYPE Checksum INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 ts
SINK q6Checksum TYPE Checksum UINT64 source INT32 producerId INT32 groupId FLOAT64 producedPower UINT64 ts
SINK winPowerProductionChecksum TYPE Checksum UINT64 solarPanels$start UINT64 solarPanels$end INT32 solarPanels$groupId FLOAT64 solarPanels$producedPower

# Query 0a - Simple Source Sink with consumers stream
SELECT * FROM consumers INTO consumersChecksum;
----
42700000, 107931947050

# Query 0b - Simple Source Sink with solarPanels stream
SELECT * FROM solarPanels INTO solarPanelsChecksum;
----
42700000, 74759775379

# Query 1 - Filter tuples
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(400) INTO consumersChecksum;
----
14236360, 36138915427

# Query 2 - Filter with multiple attributes
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(400) AND sectorId = INT32(1) INTO consumersChecksum;
----
3556803, 9027432231

# Query 3 - Filter with complex expression
SELECT * FROM consumers WHERE consumedPower >= FLOAT64(1) AND consumedPower < FLOAT64(61) INTO consumersChecksum;
----
4271223, 10579920660

# Query 4 - Filter with complex expression
SELECT consumedPower / FLOAT64(1000) AS consumedPower FROM consumers INTO q4Checksum
----
42700000, 15336467257

# Query 5 - Union Queries
# Results are verified using: https://gist.github.com/ls-1801/d03e4cfbe2957efdace1efe075c5fb95
SELECT
    producerId,
    groupId,
    producedPower,
    timestamp as ts
FROM windTurbines
UNION
SELECT
    producerId,
    groupId,
    producedPower,
    timestamp as ts
FROM solarPanels
INTO q5Checksum;
----
42900001,75003740240

# Query 6 - More union with additional projection to distinguish between union streams
# Results are verified using: https://gist.github.com/ls-1801/d03e4cfbe2957efdace1efe075c5fb95
SELECT
    source,
    producerId,
    groupId,
    producedPower,
    timestamp as ts
FROM (
    SELECT *, UINT64(1) AS source
    FROM windTurbines
        UNION
    SELECT *, UINT64(2) AS source
    FROM solarPanels
)
INTO q6Checksum
----
42900001,79036140333

# Query 7 - Window aggregations with tumbling windows
SELECT start, end, groupId, SUM(producedPower) AS producedPower
FROM solarPanels
GROUP BY groupId
WINDOW TUMBLING(timestamp, SIZE 1 HOUR)
INTO winPowerProductionChecksum;
----
1914020, 3897819033

# Query 8 - Window aggregations with sliding windows
SELECT start, end, groupId, SUM(producedPower) AS producedPower
FROM solarPanels
GROUP BY groupId
WINDOW SLIDING(timestamp, SIZE 1 HOUR, ADVANCE BY 10 MINUTES)
INTO winPowerProductionChecksum;
----
11484119, 23389063574
