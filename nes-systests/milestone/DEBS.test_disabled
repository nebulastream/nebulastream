# name: milestone/DEBS.test
# description: Queries from our DEBS tutorial
# groups: [milestone, benchmark]

# Source definitions
# MiSSING

# Query 1 - Filter tuples
Query::from("consumers")
    .filter(Attribute("consumedPower") >= 400)
    .SINK;
----

# Query 2 - Filter with multiple attributes
Query::from("consumers")
    .filter(Attribute("consumedPower") >= 400 && Attribute("sectorId") == 1)
    .SINK;
----

# Query 3 - Filter with complex expression
Query::from("consumers")
    .filter(Attribute("consumedPower") >= 1 && Attribute("consumedPower") < 60 + 1)
    .SINK;
----

# Query 4 - Filter with complex expression
Query::from("consumers")
    .map(Attribute("consumedPower") = Attribute("consumedPower") / 1000)
    .SINK;
----

# Query 5 - Combine multiple data sources
Query::from("windTurbines")
    .unionWith(Query::from("solarPanels"))
    .SINK;
----

# Query 6 - Enrich tuples with data
Query::from("windTurbines")
    .map(Attribute("source") = 1)
    .unionWith(Query::from("solarPanels")
    .map(Attribute("Source") = 2))
    .SINK;
----

# Query 7 - Window aggregations with tumbling windows
Query::from("solarPanels")
    .window(TumblingWindow::of(EventTime(Attribute("timestamp")), Hours(1)))
    .byKey(Attribute("groupId"))
    .apply(Sum(Attribute("producedPower")))
   .SINK;
----

# Query 8 - Window aggregations with sliding windows
Query::from("solarPanels")
    .window(SlidingWindow::of(EventTime(Attribute("timestamp")), Hours(1), Minutes(10)))
    .byKey(Attribute("groupId"))
    .apply(Sum(Attribute("producedPower")))
    .SINK;
----

# Query 9 - Window join
Query::from("windTurbines")
    .unionWith(Query::from("solarPanels"))
    .window(TumblingWindow::of(EventTime(Attribute("timestamp")), Hours(1)))
    .apply(Sum(Attribute("producedPower")))
    .map(Attribute("JoinKey") = 1)
    .joinWith(Query::from("consumers")
    .window(TumblingWindow::of(EventTime(Attribute("timestamp")), Hours(1)))
    .apply(Sum(Attribute("consumedPower")))
    .map(Attribute("JoinKey") = 1))
    .where(Attribute("JoinKey") == Attribute("JoinKey"))
    .window(TumblingWindow::of(EventTime(Attribute("windTurbines$start")), Hours(1)))
    .map(Attribute("DifferenceProducedConsumedPower") = Attribute("producedPower") - Attribute("consumedPower"))
    .SINK;
----

# Query 10 - Meant to highlight query merging
Query::from("windTurbines")
    .filter(Attribute("producedPower") < 80000)
    .map(Attribute("producedPower") = Attribute("producedPower") / 1000)
    .SINK;
----

# Query 11 - Meant to highlight query merging
Query::from("windTurbines")
    .map(Attribute("producedPower") = Attribute("producedPower") / 1000)
    .filter(Attribute("producedPower") < 80)
    .SINK;
----

# Query 12 - Show wind turbines produced power
Query::from("windTurbines")
    .window(SlidingWindow::of(EventTime(Attribute("timestamp")), Hours(1), Minutes(10)))
    .byKey(Attribute("groupId"))
    .apply(Sum(Attribute("producedPower")))
    .SINK;
----

# Query 13 - Show solar panels produced power
Query::from("solarPanels")
    .window(SlidingWindow::of(EventTime(Attribute("timestamp")), Hours(1), Minutes(10)))
    .byKey(Attribute("groupId"))
    .apply(Sum(Attribute("producedPower")))
    .SINK;
----

# Query 14 - Trigger streetlights
Query::from("windTurbines")
    .unionWith(Query::from("solarPanels"))
    .window(SlidingWindow::of(EventTime(Attribute("timestamp")), Hours(1), Minutes(20)))
    .apply(Sum(Attribute("producedPower")))
    .map(Attribute("JoinKey") = 1)
    .joinWith(Query::from("consumers")
            .window(SlidingWindow::of(EventTime(Attribute("timestamp")), Hours(1), Minutes(20)))
            .apply(Sum(Attribute("consumedPower")))
            .map(Attribute("JoinKey") = 1))
    .where(Attribute("JoinKey") == Attribute("JoinKey"))
    .window(SlidingWindow::of(EventTime(Attribute("start")), Hours(1), Minutes(20)))
    .map(Attribute("DifferenceProducedConsumedPower") = Attribute("producedPower") - Attribute("consumedPower"))
    .SINK;
----

