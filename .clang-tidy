# Which checks are disabled and why?
# - Disable project-specific checks (abseil, fuchsia, google, zircon, llvm)
# - Also disable modernization to trailing return types because this would cause a lot of unnecessary
#   refactoring
# - Implicit conversions sometimes make the code more readable
# - readability-named-parameter does not improve readability


Checks: [
  "*",
  # we disable project-specific checks:
  "-llvmlibc-*",
  "-android-*",
  "-zircon-*",

  "-abseil-*", # we currently don't use abseil
  "-altera-*", # we don't do OpenCL

  "-bugprone-easily-swappable-parameters", # annoying-ish
  "-modernize-use-trailing-return-type", # purely cosmetic
]

# We try to be as strict as possible.
# This list shall shrink by fixing violations in the code
# This list should only grow if clang-tidy learns new checks.
# It should be roughly ordered by how common the warning/error is, from rare (top) to common (bottom).
WarningsAsErrors: '
  *,
  -bugprone-empty-catch,
  -bugprone-switch-missing-default-case,
  -bugprone-too-small-loop-variable,
  -cert-dcl50-cpp,
  -clang-analyzer-cplusplus.StringChecker,
  -google-runtime-operator,
  -hicpp-exception-baseclass,
  -misc-header-include-cycle,
  -modernize-raw-string-literal,
  -modernize-use-std-numbers,
  -modernize-use-transparent-functors,
  -readability-non-const-parameter,
  -readability-string-compare,
  -bugprone-multi-level-implicit-pointer-conversion,
  -bugprone-suspicious-string-compare,
  -cert-dcl58-cpp,
  -cert-err34-c,
  -cert-oop11-cpp,
  -clang-analyzer-core.CallAndMessage,
  -clang-analyzer-security.insecureAPI.strcpy,
  -cppcoreguidelines-macro-to-enum,
  -modernize-macro-to-enum,
  -modernize-use-starts-ends-with,
  -performance-move-constructor-init,
  -performance-unnecessary-copy-initialization,
  -readability-redundant-declaration,
  -bugprone-forward-declaration-namespace,
  -bugprone-move-forwarding-reference,
  -cert-env33-c,
  -clang-analyzer-optin.cplusplus.VirtualCall,
  -hicpp-deprecated-headers,
  -hicpp-use-nullptr,
  -modernize-deprecated-headers,
  -modernize-use-nullptr,
  -readability-redundant-string-init,
  -bugprone-exception-escape,
  -bugprone-unhandled-self-assignment,
  -bugprone-unused-return-value,
  -google-global-names-in-headers,
  -performance-no-int-to-ptr,
  -clang-analyzer-cplusplus.NewDeleteLeaks,
  -performance-faster-string-find,
  -performance-inefficient-string-concatenation,
  -readability-avoid-nested-conditional-operator,
  -readability-avoid-return-with-void-value,
  -readability-use-anyofallof,
  -cert-msc32-c,
  -cert-msc51-cpp,
  -cppcoreguidelines-avoid-goto,
  -hicpp-avoid-goto,
  -bugprone-integer-division,
  -bugprone-macro-parentheses,
  -cppcoreguidelines-avoid-do-while,
  -cppcoreguidelines-interfaces-global-init,
  -cert-err09-cpp,
  -cert-err61-cpp,
  -cppcoreguidelines-pro-type-const-cast,
  -misc-throw-by-value-catch-by-reference,
  -cppcoreguidelines-no-malloc,
  -hicpp-no-malloc,
  -readability-suspicious-call-argument,
  -bugprone-throw-keyword-missing,
  -modernize-use-bool-literals,
  -readability-isolate-declaration,
  -bugprone-unused-local-non-trivial-variable,
  -cert-err33-c,
  -cppcoreguidelines-c-copy-assignment-signature,
  -cppcoreguidelines-pro-type-vararg,
  -hicpp-use-auto,
  -hicpp-use-emplace,
  -hicpp-vararg,
  -misc-unconventional-assign-operator,
  -modernize-use-auto,
  -modernize-use-emplace,
  -readability-duplicate-include,
  -cert-dcl21-cpp,
  -fuchsia-trailing-return,
  -readability-container-size-empty,
  -clang-analyzer-deadcode.DeadStores,
  -readability-container-data-pointer,
  -bugprone-implicit-widening-of-multiplication-result,
  -cppcoreguidelines-noexcept-move-operations,
  -hicpp-noexcept-move,
  -modernize-loop-convert,
  -performance-noexcept-move-constructor,
  -bugprone-branch-clone,
  -cppcoreguidelines-virtual-class-destructor,
  -readability-redundant-smartptr-get,
  -performance-inefficient-vector-operation,
  -readability-static-accessed-through-instance,
  -cppcoreguidelines-rvalue-reference-param-not-moved,
  -bugprone-unchecked-optional-access,
  -google-readability-braces-around-statements,
  -modernize-use-using,
  -readability-make-member-function-const,
  -cppcoreguidelines-macro-usage,
  -google-readability-avoid-underscore-in-googletest-name,
  -bugprone-use-after-move,
  -fuchsia-virtual-inheritance,
  -hicpp-invalid-access-moved,
  -readability-simplify-boolean-expr,
  -google-build-using-namespace,
  -google-runtime-int,
  -bugprone-sizeof-expression,
  -hicpp-use-equals-default,
  -modernize-use-constraints,
  -modernize-use-equals-default,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -cppcoreguidelines-prefer-member-initializer,
  -misc-definitions-in-headers,
  -performance-for-range-copy,
  -cppcoreguidelines-init-variables,
  -modernize-concat-nested-namespaces,
  -cppcoreguidelines-missing-std-forward,
  -readability-const-return-type,
  -cert-msc30-c,
  -cert-msc50-cpp,
  -cppcoreguidelines-explicit-virtual-functions,
  -hicpp-use-override,
  -modernize-use-override,
  -cppcoreguidelines-use-default-member-init,
  -modernize-use-default-member-init,
  -readability-redundant-member-init,
  -concurrency-mt-unsafe,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -hicpp-no-array-decay,
  -misc-no-recursion,
  -readability-convert-member-functions-to-static,
  -misc-use-anonymous-namespace,
  -modernize-type-traits,
  -performance-avoid-endl,
  -performance-move-const-arg,
  -bugprone-narrowing-conversions,
  -cppcoreguidelines-narrowing-conversions,
  -cppcoreguidelines-avoid-c-arrays,
  -hicpp-avoid-c-arrays,
  -modernize-avoid-c-arrays,
  -cppcoreguidelines-noexcept-swap,
  -performance-noexcept-swap,
  -google-default-arguments,
  -cert-oop54-cpp,
  -hicpp-move-const-arg,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-pro-type-cstyle-cast,
  -google-explicit-constructor,
  -readability-redundant-access-specifiers,
  -readability-inconsistent-declaration-parameter-name,
  -hicpp-explicit-conversions,
  -readability-avoid-const-params-in-decls,
  -modernize-pass-by-value,
  -performance-enum-size,
  -modernize-return-braced-init-list,
  -readability-function-cognitive-complexity,
  -google-upgrade-googletest-case,
  -fuchsia-multiple-inheritance,
  -cppcoreguidelines-pro-type-member-init,
  -hicpp-member-init,
  -fuchsia-statically-constructed-objects,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  -cppcoreguidelines-pro-type-static-cast-downcast,
  -misc-unused-parameters,
  -cppcoreguidelines-avoid-const-or-ref-data-members,
  -fuchsia-default-arguments-declarations,
  -bugprone-reserved-identifier,
  -cert-dcl37-c,
  -cert-dcl51-cpp,
  -readability-redundant-casting,
  -hicpp-signed-bitwise,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -llvm-else-after-return,
  -readability-else-after-return,
  -llvm-qualified-auto,
  -fuchsia-overloaded-operator,
  -modernize-use-nodiscard,
  -cert-err58-cpp,
  -google-readability-casting,
  -cppcoreguidelines-special-member-functions,
  -hicpp-special-member-functions,
  -hicpp-braces-around-statements,
  -readability-braces-around-statements,
  -readability-implicit-bool-conversion,
  -readability-qualified-auto,
  -performance-unnecessary-value-param,
  -llvm-header-guard,
  -hicpp-named-parameter,
  -readability-named-parameter,
  -llvm-include-order,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -misc-non-private-member-variables-in-classes,
  -readability-redundant-inline-specifier,
  -misc-const-correctness,
  -google-readability-namespace-comments,
  -llvm-namespace-comment,
  -readability-identifier-length,
  -cppcoreguidelines-avoid-magic-numbers,
  -readability-magic-numbers,
  -hicpp-uppercase-literal-suffix,
  -readability-uppercase-literal-suffix,
  -fuchsia-default-arguments-calls,
  -cppcoreguidelines-pro-type-union-access,
  -readability-identifier-naming,
  -misc-include-cleaner,
  -modernize-use-trailing-return-type,
  -clang-diagnostic-*,
'

HeaderFilterRegex: '.*\/nes-.*' # Only check files in nes- directories


# We choose the following naming conventions that are quite similar to the ClickHouse naming conventions
CheckOptions:
  cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic: 'true'
  readability-identifier-naming.ClassCase: CamelCase
  readability-identifier-naming.StructCase: CamelCase
  readability-identifier-naming.EnumCase: CamelCase
  readability-identifier-naming.LocalVariableCase: camelBack
  readability-identifier-naming.StaticConstantCase: CamelCase
  readability-identifier-naming.MemberCase: camelBack
  readability-identifier-naming.PrivateMemberPrefix: ''
  readability-identifier-naming.ProtectedMemberPrefix: ''
  readability-identifier-naming.PublicMemberCase: camelBack
  readability-identifier-naming.MethodCase: camelBack
  readability-identifier-naming.PrivateMethodPrefix: ''
  readability-identifier-naming.ProtectedMethodPrefix: ''
  readability-identifier-naming.ParameterPackCase: camelBack
  readability-identifier-naming.TemplateTemplateParameterCase: CamelCase
  readability-identifier-naming.TemplateParameterCase: CamelCase
  readability-identifier-naming.TypeTemplateParameterCase: CamelCase
  readability-identifier-naming.TypedefCase: CamelCase
  readability-identifier-naming.UnionCase: CamelCase
  modernize-loop-convert.UseCxx20ReverseRanges: false
  performance-move-const-arg.CheckTriviallyCopyableMove: false
  # Workaround clang-tidy bug: https://github.com/llvm/llvm-project/issues/46097
  readability-identifier-naming.TypeTemplateParameterIgnoredRegexp: expr-type
  cppcoreguidelines-avoid-do-while.IgnoreMacros: 'true'
  readability-function-cognitive-complexity.IgnoreMacros: 'true'
