name: NES Nightly

# This workflow is triggered every night at 2:30 AM UTC.
# This is a good way to ensure that the main branch is always in a good state.
# For now, this workflow file runs the same tests as `pr.yml` and then creates a docker image nes-executable-image:nightly, if the test pass.
# For pushing an image to the docker hub, we build debian packages (nes-amd64.deb and nes-arm64.deb) and then use them to build the docker image.
# We will add long-running test for stability and performance checks in the future.

on:
  workflow_dispatch:
    inputs:
      fuzzer:
        required: true
        default: 'main'
        type: choice
        options:
          - snw-proto-fuzz
          - snw-strict-fuzz
          - snw-text-fuzz
          - sql-parser-simple-fuzz
        description: "which branch/ref to use for running the nightly job"
      duration_in_min:
        default: 10
        type: number
  schedule:
    - cron: '30 2 * * *' # gets executed every night at 4:30 AM CEST

jobs:
  get-dev-images:
    uses: ./.github/workflows/get_dev_images.yml
    secrets: inherit
    with:
      ref: ${{ github.sha }}
      branch-name: ${{ github.ref_name }}

  run-fuzzer:
    name: "Fuzz: ${{matrix.arch}}-${{matrix.stdlib}}-${{matrix.build_type}}-${{ matrix.sanitizer }}"
    needs: [ get-dev-images ]
    container:
      image: nebulastream/nes-development:${{ needs.get-dev-images.outputs.image-tag }}-${{ matrix.stdlib }}-${{matrix.sanitizer}}
      volumes:
        - ccache:/ccache
        - test-file-cache:/test-file-cache
      env:
        CCACHE_DIR: /ccache
        MOLD_JOBS: 1
      # TODO #401 Investigate rootless docker containers
      options: --user root
    runs-on: [ self-hosted, linux, Build, "${{matrix.arch}}" ]
    strategy:
      fail-fast: false
      matrix:
        arch: [ x64 ]
        stdlib: [ 'libstdcxx', 'libcxx' ]
        # To reduce the load on our CI, we do not run all our tests with Benchmark.
        # The difference between Benchmark and Release is anyway that we disable any asserts (invariants or preconditions)
        build_type: [ 'RelWithDebInfo' ]
        sanitizer: [ 'asan', 'ubsan', 'tsan', 'none' ]
        exclude:
          # Due to limited capacity, we disable sanitizer and libstdc++ tests on arm machines
          - arch: arm64
            stdlib: 'libstdcxx'
          - arch: arm64
            sanitizer: 'asan'
          - arch: arm64
            sanitizer: 'ubsan'
          - arch: arm64
            sanitizer: 'tsan'
          # TODO #808 Enable TSAN with libc++
          - stdlib: 'libcxx'
            sanitizer: 'tsan'
    steps:
      - uses: actions/checkout@v4
        with:
          path: nes
      - name: clone corpus
        run: |
          rm -rf nes-corpora
          git clone https://fwc:${{ secrets.FWC_NES_CORPORA }}@github.com/fwc/nes-corpora.git
      - name: configure
        run: |
          cd nes
          cmake -GNinja -B build -DExternalData_OBJECT_STORES=/test-file-cache -DUSE_SANITIZER=${{ matrix.sanitizer }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DNES_LOG_LEVEL=WARN -DUSE_LIBFUZZER=ON
      - name: build
        shell: bash
        run: |
          cd nes
          cmake --build build --target ${{ inputs.fuzzer }} -j -- -k 0
      - name: setup
        run: |
          cd nes/build
          echo fuzzer="$(pwd)/$(find -name ${{ inputs.fuzzer }} -type f)" >> $GITHUB_ENV
      - name: mkdir
        run: |
          cd nes-corpora
          mkdir -p ${{ inputs.fuzzer }}/broken
          mkdir -p ${{ inputs.fuzzer }}/corpus
          mkdir /corpus_wip
      - name: fuzz ${{ inputs.duration_in_min }} min
        shell: bash
        timeout-minutes: ${{ fromJson(inputs.duration_in_min) }}
        continue-on-error: true
        run: |
          cd nes-corpora/${{ inputs.fuzzer }}/broken
          $fuzzer -jobs=100000000000 /corpus_wip > /dev/null 2> /dev/null
      - name: stop fuzzers
        run: |
          pkill -f ${{ inputs.fuzzer }}
      # necessary to prevent upload-artifact breakage
      - name: cull garbage files
        run: |
          find nes-corpora/${{ inputs.fuzzer }}/broken -name "*.log"   -delete
          find nes-corpora/${{ inputs.fuzzer }}/broken -name "Engine*" -delete
      - name: minimize corpus
        run: |
          $fuzzer -merge=1 nes-corpora/${{ inputs.fuzzer }}/corpus /corpus_wip
      - name: push corpus
        run: |
          cd nes-corpora

          cat << EOF > msg.txt
          ci run ${{ inputs.fuzzer }} ${{ inputs.duration_in_min }}min

          sut_sha: ${{ github.sha }}
          fuzzer: ${{ inputs.fuzzer}}
          duration: ${{ inputs.duration_in_min }}
          arch: ${{ matrix.arch }}
          stdlib: ${{ matrix.stdlib }}
          build_type: ${{ matrix.build_type }}
          sanitizer: ${{ matrix.sanitizer }}
          EOF

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add ${{ inputs.fuzzer }}
          git commit -F msg.txt

          exp_backoff=1
          for try in $(seq 5)
          do
            git pull --rebase
            if git push
            then
              exit
            fi
            sleep $exp_backoff
            exp_backoff=$(( exp_backoff * 2 ))
          done

          git checkout -b branch-$RANDOM
          git push --set-upstream origin
