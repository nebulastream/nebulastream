name: NES Nightly

# This workflow is triggered every night at 2:30 AM UTC.
# This is a good way to ensure that the main branch is always in a good state.
# For now, this workflow file runs the same tests as `pr.yml` and then creates a docker image nes-executable-image:nightly, if the test pass.
# For pushing an image to the docker hub, we build debian packages (nes-amd64.deb and nes-arm64.deb) and then use them to build the docker image.
# We will add long-running test for stability and performance checks in the future.

on:
  workflow_dispatch:
    inputs:
      fuzzer:
        required: true
        default: 'main'
        type: choice
        options:
          - snw-proto-fuzz
          - snw-strict-fuzz
          - snw-text-fuzz
          - sql-parser-simple-fuzz
      stdlib:
        required: true
        default: 'libcxx'
        type: choice
        options:
          - libcxx
          - libstdcxx
      duration_in_min:
        default: 10
        type: number
  schedule:
    - cron: '30 2 * * *' # gets executed every night at 4:30 AM CEST

jobs:
  get-dev-images:
    uses: ./.github/workflows/get_dev_images.yml
    secrets: inherit
    with:
      ref: ${{ github.sha }}
      branch-name: ${{ github.ref_name }}
  
  update-corpus:
    name: "update corpus ${{inputs.fuzzer}}"
    needs: [ get-dev-images ]
    container:
      image: nebulastream/nes-development:${{ needs.get-dev-images.outputs.image-tag }}-${{ inputs.stdlib }}-none
      volumes:
        - ccache:/ccache
        - test-file-cache:/test-file-cache
      env:
        CCACHE_DIR: /ccache
        MOLD_JOBS: 1
      # TODO #401 Investigate rootless docker containers
      options: --user root
    runs-on: [ self-hosted, linux, Build, x64 ]
    strategy:
      fail-fast: false
      matrix:
        build_type: [ 'RelWithDebInfo' ]
        sanitizer: [ 'none' ]
    steps:
      - uses: actions/checkout@v4
        with:
          path: nes
      - name: clone corpus
        run: |
          rm -rf nes-corpora
          git clone https://fwc:${{ secrets.FWC_NES_CORPORA }}@github.com/fwc/nes-corpora.git
      - name: configure
        run: |
          cd nes
          cmake -GNinja -B build -DExternalData_OBJECT_STORES=/test-file-cache -DUSE_SANITIZER=${{ matrix.sanitizer }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DNES_LOG_LEVEL=WARN -DUSE_LIBFUZZER=ON
      - name: build
        shell: bash
        run: |
          cd nes
          cmake --build build --target ${{ inputs.fuzzer }} -j -- -k 0
      - name: setup
        run: |
          echo in_pwd="$(pwd)" >> $GITHUB_ENV
          cd nes/build
          echo fuzzer="$(pwd)/$(find -name ${{ inputs.fuzzer }} -type f)" >> $GITHUB_ENV
      - name: mkdir
        run: |
          cd nes-corpora
          mkdir -p ${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }}
          mkdir -p ${{ inputs.fuzzer }}/corpus
          mkdir /corpus_wip
          mkdir /work_dir
      - name: check for non-sanitizer specific errors
        shell: bash
        timeout-minutes: 120
        continue-on-error: true
        run: |
          cd /work_dir
          for sanitizer in asan ubsan tsan
          do
            for input in $(find $in_pwd/nes-corpora/${{ inputs.fuzzer }}/broken/$sanitizer -type f | shuf)
            do
              if $fuzzer $input
              then
                # no git mv or -f since we mv into just-created /corpus_wip
                mv -f $input $in_pwd/nes-corpora/${{ inputs.fuzzer }}/broken/none
              fi
            done
          done
      - name: commit corpus
        run: |
          cd nes-corpora

          cat << EOF > /msg.txt
          ci run ${{ inputs.fuzzer }} min non-sanit specififc

          sut_sha: ${{ github.sha }}
          fuzzer: ${{ inputs.fuzzer}}
          duration: ${{ inputs.duration_in_min }}
          arch: x64
          stdlib: ${{ inputs.stdlib }}
          build_type: ${{ matrix.build_type }}
          sanitizer: ${{ matrix.sanitizer }}
          run_id: ${{ github.run_id }}
          attempt: ${{ github.run_attempt}}
          EOF

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add ${{ inputs.fuzzer }}
          if ! git commit -F /msg.txt
          then
            exit
          fi
      - name: push corpus
        continue-on-error: true
        run: |
          cd nes-corpora
          exp_backoff=1
          for try in $(seq 5)
          do
            if ! git pull --rebase
            then
              while git status | grep "interactive rebase in progress" > /dev/null
              do
                echo "git pull --rebase has conflict, trying to resolve"
                git status | grep "both deleted" | awk '{ system("git rm " $NF ) }'
                git status | grep "deleted by" | awk '{ system("git rm " $NF ) }'
                if git status | grep "added by" | grep none > /dev/null
                then
                  git status | grep "added by"  | grep none | awk '{ system("git add " $NF ) }'
                  git status | grep "added by"  |             awk '{ system("git rm " $NF ) }'
                else
                  git status | grep "added by us"   | awk '{ system("git add " $NF ) }'
                  git status | grep "added by them" | awk '{ system("git rm " $NF ) }'
                fi
                git commit -m "resolve conflict"
                git rebase --continue
              done
            fi
            if git push
            then
              exit
            fi
            echo push failed, sleeping for $exp_backoff
            sleep $exp_backoff
            exp_backoff=$(( exp_backoff * 2 ))
          done

          git checkout -b run-${{ github.run_id }}-${{ github.run_attempt }}
          git push --set-upstream origin run-${{ github.run_id }}-${{ github.run_attempt }}

  run-fuzzer:
    name: "${{inputs.fuzzer}}: ${{matrix.arch}}-${{inputs.stdlib}}-${{matrix.build_type}}-${{ matrix.sanitizer }}"
    needs: [ get-dev-images, update-corpus ]
    container:
      image: nebulastream/nes-development:${{ needs.get-dev-images.outputs.image-tag }}-${{ inputs.stdlib }}-${{matrix.sanitizer}}
      volumes:
        - ccache:/ccache
        - test-file-cache:/test-file-cache
      env:
        CCACHE_DIR: /ccache
        MOLD_JOBS: 1
      # TODO #401 Investigate rootless docker containers
      options: --user root
    runs-on: [ self-hosted, linux, Build, "${{matrix.arch}}" ]
    strategy:
      fail-fast: false
      matrix:
        arch: [ x64 ]
        stdlib: [ 'libcxx' ]
        # To reduce the load on our CI, we do not run all our tests with Benchmark.
        # The difference between Benchmark and Release is anyway that we disable any asserts (invariants or preconditions)
        build_type: [ 'RelWithDebInfo' ]
        sanitizer: [ none, address, undefined, thread ]
        exclude:
          # Due to limited capacity, we disable sanitizer and libstdc++ tests on arm machines
          - arch: arm64
            stdlib: 'libstdcxx'
          - arch: arm64
            sanitizer: 'address'
          - arch: arm64
            sanitizer: 'undefined'
          - arch: arm64
            sanitizer: 'thread'
          # TODO #808 Enable TSAN with libc++
          - stdlib: 'libcxx'
            sanitizer: 'thread'
    steps:
      - uses: actions/checkout@v4
        with:
          path: nes
      - name: clone corpus
        run: |
          rm -rf nes-corpora
          git clone https://fwc:${{ secrets.FWC_NES_CORPORA }}@github.com/fwc/nes-corpora.git
      - name: configure
        run: |
          cd nes
          cmake -GNinja -B build -DExternalData_OBJECT_STORES=/test-file-cache -DUSE_SANITIZER=${{ matrix.sanitizer }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DNES_LOG_LEVEL=WARN -DUSE_LIBFUZZER=ON
      - name: build
        shell: bash
        run: |
          cd nes
          cmake --build build --target ${{ inputs.fuzzer }} -j -- -k 0
      - name: setup
        run: |
          cd nes/build
          echo fuzzer="$(pwd)/$(find -name ${{ inputs.fuzzer }} -type f)" >> $GITHUB_ENV
      - name: mkdir
        run: |
          cd nes-corpora
          mkdir -p ${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }}
          mkdir -p ${{ inputs.fuzzer }}/corpus
          mkdir /corpus_wip
      - name: check for fixed inputs
        shell: bash
        timeout-minutes: 60
        continue-on-error: true
        run: |
          cd nes-corpora/${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }}
          for input in $(find -type f | shuf)
          do
            if $fuzzer $input
            then
              # no git mv or -f since we mv into just-created /corpus_wip
              mv -f $input /corpus_wip/$(echo $input | awk -F- '{ print $NF }')
            fi
          done
      - name: check for broken inputs
        shell: bash
        timeout-minutes: 60
        continue-on-error: true
        run: |
          cd nes-corpora/${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }}
          for input in $(find ../../corpus -type f | shuf)
          do
            if ! $fuzzer $input
            then
              git mv -f $input crash-$(basename $input)
            fi
          done
      - name: cull garbage files
        run: |
          find nes-corpora/${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }} -name "*.log"   -delete
          find nes-corpora/${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }} -name "Engine*" -delete
      - name: commit corpus
        run: |
          cd nes-corpora

          cat << EOF > /msg.txt
          ci run ${{ inputs.fuzzer }} ${{ inputs.duration_in_min }}min pre-check

          sut_sha: ${{ github.sha }}
          fuzzer: ${{ inputs.fuzzer}}
          duration: ${{ inputs.duration_in_min }}
          arch: ${{ matrix.arch }}
          stdlib: ${{ inputs.stdlib }}
          build_type: ${{ matrix.build_type }}
          sanitizer: ${{ matrix.sanitizer }}
          run_id: ${{ github.run_id }}
          attempt: ${{ github.run_attempt}}
          EOF

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add ${{ inputs.fuzzer }}
          if ! git commit -F /msg.txt
          then
            exit
          fi
      - name: fuzz ${{ inputs.duration_in_min }} min
        shell: bash
        timeout-minutes: ${{ fromJson(inputs.duration_in_min) }}
        continue-on-error: true
        run: |
          cd nes-corpora/${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }}
          $fuzzer -jobs=100000000000 /corpus_wip ../../corpus > /dev/null 2> /dev/null
      - name: stop fuzzers
        run: |
          pkill -f ${{ inputs.fuzzer }}
      # necessary to prevent upload-artifact breakage
      - name: cull garbage files
        run: |
          find nes-corpora/${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }} -name "*.log"   -delete
          find nes-corpora/${{ inputs.fuzzer }}/broken/${{ matrix.sanitizer }} -name "Engine*" -delete
      - name: minimize corpus
        run: |
          $fuzzer -merge=1 nes-corpora/${{ inputs.fuzzer }}/corpus /corpus_wip
      - name: commit corpus
        run: |
          cd nes-corpora

          cat << EOF > /msg.txt
          ci run ${{ inputs.fuzzer }} ${{ inputs.duration_in_min }}min

          sut_sha: ${{ github.sha }}
          fuzzer: ${{ inputs.fuzzer}}
          duration: ${{ inputs.duration_in_min }}
          arch: ${{ matrix.arch }}
          stdlib: ${{ inputs.stdlib }}
          build_type: ${{ matrix.build_type }}
          sanitizer: ${{ matrix.sanitizer }}
          run_id: ${{ github.run_id }}
          attempt: ${{ github.run_attempt}}
          EOF

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add ${{ inputs.fuzzer }}
          if ! git commit -F /msg.txt
          then
            exit
          fi
      - name: push corpus
        continue-on-error: true
        run: |
          cd nes-corpora
          exp_backoff=1
          for try in $(seq 5)
          do
            if ! git pull --rebase
            then
              while git status | grep "interactive rebase in progress" > /dev/null
              do
                echo "git pull --rebase has conflict, trying to resolve"
                git status | grep "both deleted" | awk '{ system("git rm " $NF ) }'
                git status | grep "deleted by" | awk '{ system("git rm " $NF ) }'
                if git status | grep "added by" | grep none > /dev/null
                then
                  git status | grep "added by"  | grep none | awk '{ system("git add " $NF ) }'
                  git status | grep "added by"  |             awk '{ system("git rm " $NF ) }'
                else
                  git status | grep "added by us"   | awk '{ system("git add " $NF ) }'
                  git status | grep "added by them" | awk '{ system("git rm " $NF ) }'
                fi
                git commit -m "resolve conflict"
                git rebase --continue
              done
            fi
            if git push
            then
              exit
            fi
            echo push failed, sleeping for $exp_backoff
            sleep $exp_backoff
            exp_backoff=$(( exp_backoff * 2 ))
          done

          git checkout -b run-${{ github.run_id }}-${{ github.run_attempt }}
          git push --set-upstream origin run-${{ github.run_id }}-${{ github.run_attempt }}

  final-merge:
    name: "Merge corpora"
    needs: [ get-dev-images, run-fuzzer ]
    container:
      image: nebulastream/nes-development:${{ needs.get-dev-images.outputs.image-tag }}-${{ inputs.stdlib }}-none
      volumes:
        - ccache:/ccache
        - test-file-cache:/test-file-cache
      env:
        CCACHE_DIR: /ccache
        MOLD_JOBS: 1
      # TODO #401 Investigate rootless docker containers
      options: --user root
    runs-on: [ self-hosted, linux, Build, "x64" ]
    steps:
      - uses: actions/checkout@v4
        with:
          path: nes
      - name: clone corpus
        run: |
          rm -rf nes-corpora
          git clone https://fwc:${{ secrets.FWC_NES_CORPORA }}@github.com/fwc/nes-corpora.git
      - name: configure
        run: |
          cd nes
          cmake -GNinja -B build -DExternalData_OBJECT_STORES=/test-file-cache -DUSE_SANITIZER=none -DCMAKE_BUILD_TYPE=RelWithDebug -DNES_LOG_LEVEL=WARN -DUSE_LIBFUZZER=ON
      - name: build
        shell: bash
        run: |
          cd nes
          cmake --build build --target ${{ inputs.fuzzer }} -j -- -k 0
      - name: setup
        run: |
          cd nes/build
          echo fuzzer="$(pwd)/$(find -name ${{ inputs.fuzzer }} -type f)" >> $GITHUB_ENV
      - name: mkdir
        run: |
          cd nes-corpora
          mkdir -p ${{ inputs.fuzzer }}/corpus
          mkdir /merged_corpus_wip
      - name: minimize corpus
        run: |
          $fuzzer -merge=1 /merged_corpus_wip nes-corpora/${{ inputs.fuzzer }}/corpus
          rm -rf nes-corpora/${{ inputs.fuzzer }}/corpus
          mv /merged_corpus_wip nes-corpora/${{ inputs.fuzzer }}/corpus
      - name: push corpus
        continue-on-error: true
        run: |
          cd nes-corpora

          cat << EOF > /msg.txt
          ci run ${{ inputs.fuzzer }} ${{ inputs.duration_in_min }}min merge

          sut_sha: ${{ github.sha }}
          fuzzer: ${{ inputs.fuzzer}}
          duration: ${{ inputs.duration_in_min }}
          arch: x64
          stdlib: ${{ inputs.stdlib }}
          build_type: RelWithDebInfo
          sanitizer: none
          run_id: ${{ github.run_id }}
          attempt: ${{ github.run_attempt}}
          EOF

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add ${{ inputs.fuzzer }}
          if ! git commit -F /msg.txt
          then
            exit
          fi

          exp_backoff=1
          for try in $(seq 5)
          do
            if ! git pull --rebase
            then
              while git status | grep "interactive rebase in progress" > /dev/null
              do
                echo "git pull --rebase has conflict, trying to resolve"
                git status | grep "both deleted" | awk '{ system("git rm " $NF ) }'
                git status | grep "deleted by" | awk '{ system("git rm " $NF ) }'
                if git status | grep "added by" | grep none > /dev/null
                then
                  git status | grep "added by"  | grep none | awk '{ system("git add " $NF ) }'
                  git status | grep "added by"  |             awk '{ system("git rm " $NF ) }'
                else
                  git status | grep "added by us"   | awk '{ system("git add " $NF ) }'
                  git status | grep "added by them" | awk '{ system("git rm " $NF ) }'
                fi
                git commit -m "resolve conflict"
                git rebase --continue
              done
            fi
            if git push
            then
              exit
            fi
            echo push failed, sleeping for $exp_backoff
            sleep $exp_backoff
            exp_backoff=$(( exp_backoff * 2 ))
          done

          git checkout -b run-${{ github.run_id }}-${{ github.run_attempt }}
          git push --set-upstream origin run-${{ github.run_id }}-${{ github.run_attempt }}

  gen-cov:
    name: "generate coverage"
    needs: [ get-dev-images, final-merge ]
    container:
      image: nebulastream/nes-development:${{ needs.get-dev-images.outputs.image-tag }}-${{ inputs.stdlib }}-none
      volumes:
        - ccache:/ccache
        - test-file-cache:/test-file-cache
      env:
        CCACHE_DIR: /ccache
        MOLD_JOBS: 1
      # TODO #401 Investigate rootless docker containers
      options: --user root
    runs-on: [ self-hosted, linux, Build, "x64" ]
    steps:
      - uses: actions/checkout@v4
        with:
          path: nes
      - name: clone corpus
        run: |
          rm -rf nes-corpora
          git clone https://fwc:${{ secrets.FWC_NES_CORPORA }}@github.com/fwc/nes-corpora.git
      - name: configure
        run: |
          cd nes
          cmake -GNinja -B build -DExternalData_OBJECT_STORES=/test-file-cache -DUSE_SANITIZER=none -DCMAKE_BUILD_TYPE=RelWithDebug -DNES_LOG_LEVEL=WARN -DUSE_LIBFUZZER=ON -DUSE_GCOV=ON
      - name: build
        shell: bash
        run: |
          cd nes
          cmake --build build --target ${{ inputs.fuzzer }} -j -- -k 0
      - name: setup
        run: |
          cd nes/build
          echo fuzzer="$(pwd)/$(find -name ${{ inputs.fuzzer }} -type f)" >> $GITHUB_ENV
      - name: run on corpus and broken
        run: |
          if ! find nes-corpora/${{ inputs.fuzzer }} -type f -print0 | xargs -0 --max-args=1 --max-procs="$(nproc)" timeout 6m "$fuzzer" -timeout=300
          then
            true
          fi
      - name: install gcovr
        run: |
          apt install -y gcovr graphviz
      - name: garbage files around?
        run: |
          find -name "*.gcda"
      - name: collect coverage
        run: |
          gcovr --gcov-executable="llvm-cov-19 gcov" --html-details --output cov/ --json gcovr.json --root nes
      - name: generate callgraph .dot
        run: |
          python3 nes/gen_callgraph.py nes/build/compile_commands.json gcovr.json >> $GITHUB_STEP_SUMMARY
      - name: generate callgraph .svg
        run: |
          neato -Tsvg cov.dot > cov.svg
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            cov/
            cov.dot
            cov.svg
            gcovr.json
