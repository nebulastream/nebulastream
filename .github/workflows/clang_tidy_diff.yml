# This workflow computes the clang-tidy check for the git diff between base and head.
# we generate GitHub PR annotations based on the output of clang-tidy if this workflow was called within the context
# of a pr.
name: Clang-Tidy-Diff
on:
  workflow_call:
    inputs:
      dev_image_tag:
        required: true
        type: string
        description: "Docker image tag of the development image"
      head_sha:
        type: string
        required: true
        description: "commit sha of head"
      base_sha:
        type: string
        required: true
        description: "commit sha of base"
      number_of_commits:
        type: number
        required: false
        default: -1

jobs:
  check-clang-tidy:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        # We only want to run the tests on x64, as the log level tests are not architecture dependent, and we have more x64 runners
        # We only want to run the tests with libcxx, as the log level tests are not standard library dependent, and we want to reduce the number of jobs
        arch: [ x64 ]
        stdlib: [ 'libcxx' ]
        sanitizer: [ 'none' ]
        build_type: [ 'Debug' ]
        include:
          - arch: x64
            runner: [ "ubuntu-24.04" ]
    steps:
      - name: Include base commit
        id: increment
        run: echo "result=$((${{ inputs.number_of_commits }} + 1))" >> $GITHUB_OUTPUT
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ steps.increment.outputs.result }}
      - uses: ./.github/steps/prepare-github
        with:
          image_name: nebulastream/nes-development:${{ inputs.dev_image_tag }}-${{ matrix.stdlib }}-${{matrix.sanitizer}}
          ccache_key: ${{ matrix.arch }}-${{ matrix.build_type }}-${{matrix.sanitizer}}-${{matrix.stdlib}}
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.18
        with:
          key: x64-Debug-none-libcxx
      - uses: ./.github/steps/run-in-container
        name: CMake Build
        with:
          image_name: nebulastream/nes-development:${{ inputs.dev_image_tag }}-${{ matrix.stdlib }}-${{matrix.sanitizer}}
          run: |
            source .github/.env/test-${{matrix.sanitizer}}.env
            cmake -GNinja -B build -DUSE_SANITIZER=${{ matrix.sanitizer }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DNES_LOG_LEVEL=DEBUG
            # We need to build the project, as some headers are only created during the build.
            cmake --build build -j  -- -k 0
      - name: Create results directory
        run: mkdir clang-tidy-result
      - uses: ./.github/steps/run-in-container
        name: Run Clang Tidy Pre-check
        with:
          image_name: nebulastream/nes-development:${{ inputs.dev_image_tag }}-${{ matrix.stdlib }}-${{matrix.sanitizer}}
          run: |
            git diff -U0 ${{ inputs.base_sha }} -- ':!*.inc' | clang-tidy-diff-19.py -clang-tidy-binary clang-tidy-19 -p1 -path build -export-fixes clang-tidy-result/fixes.yml  -checks='-*,readability-duplicate-include' -j $(nproc)
      - uses: ./.github/steps/run-in-container
        name: Run Clang Tidy with all Checks
        with:
          image_name: nebulastream/nes-development:${{ inputs.dev_image_tag }}-${{ matrix.stdlib }}-${{matrix.sanitizer}}
          run: |
            git diff -U0 ${{ inputs.base_sha }} -- ':!*.inc' | clang-tidy-diff-19.py -clang-tidy-binary clang-tidy-19 -p1 -path build -export-fixes clang-tidy-result/fixes.yml -j $(nproc)
      - name: Upload Clang-Tidy Results
        if: ${{ !cancelled() && !github.event.act }}
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: warn
          name: clang-tidy-result
          path: clang-tidy-result
      - name: Run clang-tidy-pr-comments action
        if: ${{ !cancelled() && github.event_name == 'pull_request' }}
        # requires python3-venv
        uses: platisd/clang-tidy-pr-comments@v1
        with:
          github_token: ${{ github.token }}
          clang_tidy_fixes: clang-tidy-result/fixes.yml
          request_changes: false
          # Optionally set the number of comments per review to avoid GitHub API timeouts for heavily loaded pull requests
          suggestions_per_comment: 100
          auto_resolve_conversations: true
          python_path: /usr/bin/python3
