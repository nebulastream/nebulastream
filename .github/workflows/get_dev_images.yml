# NebulaStream (NES) Docker Image Hierarchy
#
# This workflow creates a set of multi-architecture Docker images for the NebulaStream (NES) project.
# Here's how the images are structured:
#
# 1. BASE IMAGES:
#    - nebulastream/nes-development-base - Foundation image with LLVM toolchain and CMake
#    - Available for both x64 and arm64 architectures
#
# 2. SPECIALIZED IMAGES:
#    Four main image types built on top of the base image:
#    - development-dependency: Contains pre-built SDK based on vcpkg manifest
#    - development: Full development environment with dependencies and dev tools like clang-format
#    - ci: Optimized for continuous integration workflows
#    - benchmark: Configured for performance benchmarking
#
# 3. BUILD VARIANTS:
#    Each specialized image has variants based on:
#    - Architecture: x64, arm64 (arm64 is not available for libstdcxx)
#    - Standard Library: libstdcxx, libcxx
#    - Sanitizer: none, address, thread, undefined
#
# 4. TAGGING SCHEMA:
#    - Full tags: nebulastream/nes-[IMAGE_TYPE]:[TAG]-[ARCH]-[STDLIB]-[SANITIZER]
#    - Multi-arch tags: nebulastream/nes-[IMAGE_TYPE]:[TAG]-[STDLIB]-[SANITIZER]
#    - Branch-specific tags: nebulastream/nes-[IMAGE_TYPE]:[BRANCH_NAME]-[STDLIB]-[SANITIZER]
#    - Shortcuts: nebulastream/nes-[IMAGE_TYPE]:[BRANCH_NAME] (defaults to libstdcxx-none)
#
# 5. BUILD CACHE SYSTEM:
#    - Each image build utilizes Docker's BuildKit cache to speed up builds
#    - Cache images are stored in the registry with the following naming pattern:
#      nebulastream/nes-[IMAGE_TYPE]-cache:[BRANCH_NAME]-[ARCH]-[STDLIB]-[SANITIZER]
#    - Cache hierarchy:
#      1. Branch-specific cache: Used for PR and feature branch builds
#      2. Latest cache: Fallback when branch-specific cache isn't available
#    - Cache is exported in "max" mode to include all intermediate layers
#
# The workflow creates multi-architecture manifests that combine x64 and arm64 images
# where available, and adds convenience tags for common configurations.
# This enables developers to easily select the appropriate image for their
# development needs, CI pipelines, or benchmarking tasks.

# This workflow calculates the development image tag of a ref. If the development image does not exist yet
# the workflow will build the new dependency image.
name: Dependency Image

on:
  workflow_call:
    inputs:
      branch-name:
        required: false
        type: string
        default: ${{ inputs.ref }}
        description: "Branch name to tag the docker image with"
      ref:
        required: true
        type: string
    outputs:
      image-tag:
        description: "Docker image tag for the current dependencies"
        value: ${{ jobs.detect-dependency-changes.outputs.tag }}

jobs:
  detect-dependency-changes:
    # This job detects changes to files relevant for our dependency management by calculating a hash value
    # and looking for existing development images with the same hash.
    # If we find a development image matching the hash we skip building new docker images.
    # This job also determines the development image tag used for building and testing
    name: Detect changes to dependencies
    outputs:
      build-dependency: ${{steps.hash-and-lookup.outputs.build-dependency}}
      tag: ${{ steps.hash-and-lookup.outputs.tag }}
      hash: ${{ steps.hash-and-lookup.outputs.hash }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Calculate and lookup hash
        id: hash-and-lookup
        run: |
          HASH=$(docker/dependency/hash_dependencies.sh)
          echo "Using Hash: $HASH"
          
          # Output the tag (hash) to GitHub Actions
          echo "tag=$HASH" >> "$GITHUB_OUTPUT"
          echo "hash=$HASH" >> "$GITHUB_OUTPUT"
          
          # check if tag exists on dockerhub
          DOCKERHUB_RESPONSE_CODE=$(curl --silent --output respose.txt --write-out '%{http_code}\n' "https://hub.docker.com/v2/namespaces/nebulastream/repositories/nes-ci/tags/$HASH")
          echo dockerhub response code: $DOCKERHUB_RESPONSE_CODE

          if [ "$DOCKERHUB_RESPONSE_CODE" -ge 500 ]; then
            echo "dockerhub internal server error"
            cat response.txt
            exit 1
          elif [ "$DOCKERHUB_RESPONSE_CODE" -eq 403 ]; then
            echo "dockerhub responded with 403: Forbidden?!"
            exit 2
          elif [ "$DOCKERHUB_RESPONSE_CODE" -eq 404 ]; then
            echo "Development image with $HASH does not exist in the docker registry"
            echo "build-dependency=true" >> "$GITHUB_OUTPUT"
          elif [ "$DOCKERHUB_RESPONSE_CODE" -eq 200 ]; then
            echo "found image $HASH"
            echo "build-dependency=false" >> "$GITHUB_OUTPUT"
          else
            echo unexpected docker response! HTTP Status $DOCKERHUB_RESPONSE_CODE
            cat reponse.txt
          fi

  build-dev-images:
    # We run the docker image build on separate machines and combine them into a single
    # multi-arch docker image in the docker-development-images job.
    # The Docker build uses a cache based on previous branch-specific images or the
    # main branch
    # This job builds a Base image which contains the llvm based toolchain and a recent
    # CMake version
    # The Dependency Image contains a pre-built sdk based on the vcpkg manifest
    # The Development Image contains the dependencies and additional tooling like clang-format.
    name: "Build Dev Images"
    needs: [ detect-dependency-changes ]
    if: needs.detect-dependency-changes.outputs.build-dependency == 'true'
    runs-on: [ self-hosted, linux, Build, "${{ matrix.arch }}", dep-builder ]
    strategy:
      fail-fast: false
      matrix:
        arch: [ x64, arm64 ]
        stdlib: [ 'libstdcxx', 'libcxx' ]
        sanitizer: [ 'address', 'thread', 'undefined', 'none' ]
        exclude:
          - arch: arm64
            stdlib: 'libstdcxx'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_SECRET }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.10.0
      - name: Build Base Image
        env:
          TAG: ${{ needs.detect-dependency-changes.outputs.tag }}
          ARCH: ${{ matrix.arch }}
          BRANCH_NAME: ${{ inputs.branch-name }}
        run: |
          set -euo pipefail

          build_tag="nebulastream/nes-development-base:${TAG}-${ARCH}"
          cache_to="type=registry,ref=nebulastream/nes-development-base-cache:${BRANCH_NAME}-${ARCH},mode=max"
          cache_from_primary="type=registry,ref=nebulastream/nes-development-base-cache:${BRANCH_NAME}-${ARCH}"
          cache_from_latest="type=registry,ref=nebulastream/nes-development-base-cache:latest-${ARCH}"

          for attempt in $(seq 1 10); do
            echo "Attempt ${attempt}/10 to build and push ${build_tag}"
            if docker buildx build \
                --push \
                --tag "${build_tag}" \
                --cache-to "${cache_to}" \
                --cache-from "${cache_from_primary}" \
                --cache-from "${cache_from_latest}" \
                --sbom=true \
                --provenance=true \
                --file docker/dependency/Base.dockerfile \
                .; then
              echo "Build and push succeeded on attempt ${attempt}"
              break
            fi

            if [ "${attempt}" -eq 10 ]; then
              echo "Failed to build and push ${build_tag} after ${attempt} attempts" >&2
              exit 1
            fi

            sleep $((attempt * 5))
          done
      - name: Build Dependency Image
        env:
          TAG: ${{ needs.detect-dependency-changes.outputs.tag }}
          ARCH: ${{ matrix.arch }}
          STDLIB: ${{ matrix.stdlib }}
          SANITIZER: ${{ matrix.sanitizer }}
          BRANCH_NAME: ${{ inputs.branch-name }}
          VCPKG_DEPENDENCY_HASH: ${{ needs.detect-dependency-changes.outputs.hash }}
        run: |
          set -euo pipefail

          build_tag="nebulastream/nes-development-dependency:${TAG}-${ARCH}-${STDLIB}-${SANITIZER}"
          cache_to="type=registry,ref=nebulastream/nes-development-dependency-cache:${BRANCH_NAME}-${ARCH}-${STDLIB}-${SANITIZER},mode=max"
          cache_from_primary="type=registry,ref=nebulastream/nes-development-dependency-cache:${BRANCH_NAME}-${ARCH}-${STDLIB}-${SANITIZER}"
          cache_from_latest="type=registry,ref=nebulastream/nes-development-dependency-cache:latest-${ARCH}-${STDLIB}-${SANITIZER}"

          for attempt in $(seq 1 10); do
            echo "Attempt ${attempt}/10 to build and push ${build_tag}"
            if docker buildx build \
                --push \
                --tag "${build_tag}" \
                --cache-to "${cache_to}" \
                --cache-from "${cache_from_primary}" \
                --cache-from "${cache_from_latest}" \
                --build-arg TAG="${TAG}-${ARCH}" \
                --build-arg ARCH="${ARCH}" \
                --build-arg STDLIB="${STDLIB}" \
                --build-arg SANITIZER="${SANITIZER}" \
                --build-arg VCPKG_DEPENDENCY_HASH="${VCPKG_DEPENDENCY_HASH}" \
                --sbom=true \
                --provenance=true \
                --file docker/dependency/Dependency.dockerfile \
                .; then
              echo "Build and push succeeded on attempt ${attempt}"
              break
            fi

            if [ "${attempt}" -eq 10 ]; then
              echo "Failed to build and push ${build_tag} after ${attempt} attempts" >&2
              exit 1
            fi

            sleep $((attempt * 5))
          done
      - name: Build Development Image
        env:
          TAG: ${{ needs.detect-dependency-changes.outputs.tag }}
          ARCH: ${{ matrix.arch }}
          STDLIB: ${{ matrix.stdlib }}
          SANITIZER: ${{ matrix.sanitizer }}
          BRANCH_NAME: ${{ inputs.branch-name }}
        run: |
          set -euo pipefail

          build_tag="nebulastream/nes-development:${TAG}-${ARCH}-${STDLIB}-${SANITIZER}"
          cache_to="type=registry,ref=nebulastream/nes-development-cache:${BRANCH_NAME}-${ARCH}-${STDLIB}-${SANITIZER},mode=max"
          cache_from_primary="type=registry,ref=nebulastream/nes-development-cache:${BRANCH_NAME}-${ARCH}-${STDLIB}-${SANITIZER}"
          cache_from_dependency="type=registry,ref=nebulastream/nes-development-dependency-cache:latest-${ARCH}-${STDLIB}-${SANITIZER}"
          build_arg_tag="${TAG}-${ARCH}-${STDLIB}-${SANITIZER}"

          for attempt in $(seq 1 10); do
            echo "Attempt ${attempt}/10 to build and push ${build_tag}"
            if docker buildx build \
                --push \
                --tag "${build_tag}" \
                --cache-to "${cache_to}" \
                --cache-from "${cache_from_primary}" \
                --cache-from "${cache_from_dependency}" \
                --build-arg TAG="${build_arg_tag}" \
                --sbom=true \
                --provenance=true \
                --file docker/dependency/Development.dockerfile \
                .; then
              echo "Build and push succeeded on attempt ${attempt}"
              break
            fi

            if [ "${attempt}" -eq 10 ]; then
              echo "Failed to build and push ${build_tag} after ${attempt} attempts" >&2
              exit 1
            fi

            sleep $((attempt * 5))
          done
      - name: Build CI Image
        env:
          TAG: ${{ needs.detect-dependency-changes.outputs.tag }}
          ARCH: ${{ matrix.arch }}
          STDLIB: ${{ matrix.stdlib }}
          SANITIZER: ${{ matrix.sanitizer }}
        run: |
          set -euo pipefail

          build_tag="nebulastream/nes-ci:${TAG}-${ARCH}-${STDLIB}-${SANITIZER}"
          build_arg_tag="${TAG}-${ARCH}-${STDLIB}-${SANITIZER}"

          for attempt in $(seq 1 10); do
            echo "Attempt ${attempt}/10 to build and push ${build_tag}"
            if docker buildx build \
                --push \
                --tag "${build_tag}" \
                --build-arg TAG="${build_arg_tag}" \
                --sbom=true \
                --provenance=true \
                --file docker/dependency/DevelopmentCI.dockerfile \
                .; then
              echo "Build and push succeeded on attempt ${attempt}"
              break
            fi

            if [ "${attempt}" -eq 10 ]; then
              echo "Failed to build and push ${build_tag} after ${attempt} attempts" >&2
              exit 1
            fi

            sleep $((attempt * 5))
          done
      - name: Build benchmark image
        uses: docker/build-push-action@v6
        if: ${{matrix.sanitizer == 'none'}}
        with:
          push: true
          tags: nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-${{matrix.arch}}-${{matrix.stdlib}}
          build-args: TAG=${{ needs.detect-dependency-changes.outputs.tag }}-${{matrix.arch}}-${{matrix.stdlib}}-none
          context: .
          file: docker/dependency/Benchmark.dockerfile
  merge-dev-images:
    # This Job merges platform specific images into a single multi-platform image
    name: "Merge Dev Images"
    needs: [ build-dev-images, detect-dependency-changes ]
    if: needs.detect-dependency-changes.outputs.build-dependency == 'true'
    runs-on: [ self-hosted, linux, Build, x64 ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Login to Docker Hub
        if: ${{ !github.event.act }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_SECRET }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.10.0


      - name: Combine Manifests
        shell: bash
        run: |
          docker buildx imagetools create -t nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }} \
            nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }}-x64 \
            nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }}-arm64
          
          for image_tag in development-dependency development ci; do
          
            for sanitizer in none address thread undefined; do
              docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx-$sanitizer \
                nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-x64-libcxx-$sanitizer \
                nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-arm64-libcxx-$sanitizer
          
              docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libstdcxx-$sanitizer \
                nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-x64-libstdcxx-$sanitizer 
            done
          
          done
          
          docker buildx imagetools create -t nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx \
            nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-x64-libcxx \
            nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-arm64-libcxx
      
          docker buildx imagetools create -t nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-libstdcxx \
            nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-x64-libstdcxx

      - name: Combine Manifests for branch specific docker image
        if: ${{ inputs.branch-name != '' }}
        run: |
          docker buildx imagetools create -t nebulastream/nes-development-base:${{ inputs.branch-name }} \
            nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }}
          
          for image_tag in development-dependency development ci; do
            for sanitizer in none address thread undefined; do
              docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ inputs.branch-name }}-libcxx-$sanitizer \
                nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx-$sanitizer \
          
              docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ inputs.branch-name }}-libstdcxx-$sanitizer \
                nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libstdcxx-$sanitizer
            done
          done
          
          docker buildx imagetools create -t nebulastream/nes-benchmark:${{ inputs.branch-name }}-libcxx \
            nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx \
      
          docker buildx imagetools create -t nebulastream/nes-benchmark:${{ inputs.branch-name }}-libstdcxx \
            nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-libstdcxx

      - name: Create shortcut images
        if: ${{ inputs.branch-name != '' }}
        run: |
          docker buildx imagetools create -t nebulastream/nes-development:${{ inputs.branch-name }} \
            nebulastream/nes-development:${{ inputs.branch-name }}-libstdcxx-none
          
          docker buildx imagetools create -t nebulastream/nes-development:${{ inputs.branch-name }}-libcxx \
            nebulastream/nes-development:${{ inputs.branch-name }}-libcxx-none
          
          for image_tag in development-dependency development ci; do
          
            docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ inputs.branch-name }} \
              nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx-none \
          
            docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }} \
              nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx-none \
          
            for sanitizer in none address thread undefined; do
              docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ inputs.branch-name }}-$sanitizer \
                nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx-$sanitizer \
          
              docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ inputs.branch-name }}-libcxx-$sanitizer \
                nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx-$sanitizer \
          
              docker buildx imagetools create -t nebulastream/nes-$image_tag:${{ inputs.branch-name }}-libstdcxx-$sanitizer \
                nebulastream/nes-$image_tag:${{ needs.detect-dependency-changes.outputs.tag }}-libstdcxx-$sanitizer
            done
          done
          
          docker buildx imagetools create -t nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }} \
            nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx \
          
          docker buildx imagetools create -t nebulastream/nes-benchmark:${{ inputs.branch-name }} \
            nebulastream/nes-benchmark:${{ needs.detect-dependency-changes.outputs.tag }}-libcxx \
          
