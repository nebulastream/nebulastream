name: Execute Query
on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
        description: "ref of the branch"
      dev_image_tag:
        required: true
        type: string
        description: "Docker image tag of the benchmarking image"
      runtime_seconds:
        required: false
        type: string
        description: "Runtime of the query in seconds, after this the query is stopped. This is directly assigned to bash variable, so it can be string that evaluates to a number i.e $((5*60)) for a 5 minute runtime."
        default: "$((23*60*60))"
      query_config:
        required: false
        type: string
        default: |
          query: |
            SELECT * FROM GENERATOR_SOURCE INTO void_sink
          sinks:
            - name: VOID_SINK
              schema:
                - name: GENERATOR_SOURCE$double
                  type: FLOAT64
              type: Void
              config: {}
                
          logical:
            - name: GENERATOR_SOURCE
              schema:
                - name: double
                  type: FLOAT64

          physical:
            - logical: GENERATOR_SOURCE
              parser_config:
                type: CSV
                fieldDelimiter: ","
              type: Generator
              source_config:
                generator_rate_type: FIXED
                generator_rate_config: emit_rate 1000
                stop_generator_when_sequence_finishes: NONE
                seed: 1
                generator_schema: |
                  NORMAL_DISTRIBUTION FLOAT64 0 1

jobs:
  execute-query:
    name: "E2E Test"
    timeout-minutes: 1440 # 24 hours
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        arch: [ arm64, x64 ]
        include:
          - arch: arm64
            runner: [ "ubuntu-24.04-arm" ]
          - arch: x64
            runner: [ "ubuntu-24.04" ]
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: ./.github/steps/prepare-github
        with:
          image_name: nebulastream/nes-development:${{ inputs.dev_image_tag }}-${{ matrix.stdlib }}-${{matrix.sanitizer}}
          ccache_key: ${{ matrix.arch }}-${{ matrix.build_type }}-${{matrix.sanitizer}}-${{matrix.stdlib}}
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.18
        with:
          key: ${{ matrix.arch }}-${{ matrix.build_type }}-${{matrix.sanitizer}}-${{matrix.stdlib}}
      - uses: ./.github/steps/run-in-container
        name: build and test
        with:
          image_name: nebulastream/nes-development:${{ inputs.dev_image_tag }}
          run: |
            cmake -GNinja -B build -DExternalData_OBJECT_STORES=/test-file-cache -DNES_LOG_LEVEL=DEBUG
            
            cmake --build build -j -- -k 0
            
            # prepare query
            cat << 'EOF' > query.yml
            ${{ inputs.query_config }}
            EOF
            
            build/nes-single-node-worker/nes-single-node-worker > worker.log 2>&1 &
            WORKER_PID=$!
            
            sleep 5
            build/nes-nebuli/nes-nebuli -d -s localhost:8080 register -x -i query.yml
            
            # wait and monitor
            SECONDS=0
            MAX_SECONDS=${{ inputs.runtime_seconds}}
            echo "Stress test runtime set to $MAX_SECONDS seconds"
            
            while [ $SECONDS -lt $MAX_SECONDS ]; do
              if ! kill -0 $WORKER_PID 2>/dev/null; then
                echo "Worker has exited unexpectedly!"
                tail -n 50 worker.log
                exit 1
              fi
              sleep 60
            done
            
            # stop query
            build/nes-nebuli/nes-nebuli -d -s localhost:8080 stop 1
            
            # stop worker
            kill $WORKER_PID
            wait $WORKER_PID || true
            tail -n 50 worker.log

      - name: Output Logs on failure
        if: failure()
        run: |
          cat nebuli.log
          cat worker.log
