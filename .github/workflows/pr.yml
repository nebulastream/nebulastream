name: NES PR CI

# The following pipeline is meant to run for every PR. It will not call any other workflow / pipeline.
# It will also check for the format and the guard checks. If these steps are successful, it will try to build the PR and run the tests.
# In the future, we will add more automated checks to this pipeline, e.g., clang-tidy for our codebase or code coverage checks.

on:
  pull_request:
    types:
      - ready_for_review
      - synchronize
      - opened
      - reopened
    branches:
      - master
      - 'feature/**'
    paths-ignore:
      - nes-common/include/Version/version.hpp
      - README.md
      - CODE_OF_CONDUCT.md
      - CHANGELOG.md
      - 'docs/**'

jobs:
  validateTrigger:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: [ self-hosted, linux, X64, Build ]
    steps:
      - uses: AutoModality/action-clean@v1
      - name: Checkout
        uses: actions/checkout@v4
      - name: Contextual QA Checklists
        if: github.event_name == 'pull_request'
        uses: wyozi/contextual-qa-checklist-action@1.3.2
        with:
          gh-token: ${{ secrets.NES_CI_SECRET }}
          comment-header: "Thank you for your PR. Please pay attention to the following items before merging:"

  pre-build-checks:
    name: "Pre-Build-Checks"
    runs-on: [ self-hosted, linux, X64, Build ]
    needs: [ validateTrigger ]
    steps:
      - uses: AutoModality/action-clean@v1
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '0'
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.NES_CI_SECRET }}
      - name: Build Docker for CleanUp
        id: builddocker_prebuild
        working-directory: ${{ github.workspace }}/docker/buildImage
        run: docker build  -t nes_build_ubuntu -f Dockerfile-NES-Build .
      - name: preamble-check
        run: |
          docker run --name ${{ github.run_id }}_preamble-check -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build-preamble-check.sh nes_build_ubuntu
      - name: format-check
        run: |
          docker run --name ${{ github.run_id }}_format-check -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build-format-check.sh nes_build_ubuntu
      - name: guard-check
        run: |
          docker run --name ${{ github.run_id }}_guard-check -v $GITHUB_WORKSPACE:/nebulastream --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build-guard-check.sh nes_build_ubuntu
      - name: docker cleanup
        if: ${{ always() }}
        run: |
          docker rm -f ${{ github.run_id }}_preamble-check
          docker rm -f ${{ github.run_id }}_format-check
          docker rm -f ${{ github.run_id }}_guard-check

  build-linux:
    if: "!contains(github.event.head_commit.message, 'GIT-CI:')"
    name: ${{ matrix.osversion }} ${{ matrix.arch }} ${{ matrix.runner_group }}
    needs: [ pre-build-checks ]
    timeout-minutes: 40
    runs-on:
      group: ${{ matrix.runner_group }}
      labels: [ self-hosted, linux, '${{ matrix.arch }}', Build]
    strategy:
      fail-fast: false
      matrix:
        include:
          - osversion: ubuntu-22_04
            arch: "X64"
            require_build: "true"
            require_test: "true"
            build_parallelism: "16"
            test_parallelism: "4"
            runner_group: "default"
          - osversion: ubuntu-22_04
            arch: "X64"
            require_build: "true"
            require_test: "true"
            build_parallelism: "16"
            test_parallelism: "4"
            runner_group: "gpu"
          - osversion: ubuntu-22_04
            arch: "arm64"
            require_build: "true"
            require_test: "true"
            build_parallelism: "32" # As we have over 200 cores on the arm server, this should be fine.
            test_parallelism: "8"   # As we have over 200 cores on the arm server, this should be fine.
            runner_group: "default"
    steps:
      - uses: AutoModality/action-clean@v1
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CI_SECRET }}
          ssh-strict: 'false'
          fetch-depth: '0'
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.NES_CI_SECRET }}
      - name: Build Docker for CleanUp
        id: builddocker_cleanup
        continue-on-error: true
        working-directory: ${{ github.workspace }}/docker/buildImage
        run: docker build  -t nes_build_${{ matrix.osversion }} -f Dockerfile-NES-Build-${{ matrix.osversion }} .
      - name: "Perform cleanup, if necessary"
        run: |
          os_version_arch="${{ matrix.osversion }}_${{ matrix.arch }}"
          cache_dir="/data/nes-ci/tmp/nes-ccache_$os_version_arch"
          RUNNER=$(basename $(dirname $(dirname $(dirname $(pwd)))))
          build_dir="/data/nes-ci/tmp/nes-build_$RUNNER_${RUNNER_NAME}_${{ matrix.osversion }}_${{ matrix.arch }}"
          docker_image_name="nes_build_${{ matrix.osversion }}"
          github_workspace=${{ github.workspace }}
          file="/data/nes-ci/tmp/last_checked_$RUNNER_${RUNNER_NAME}_${{ matrix.osversion }}_${{ matrix.arch }}.txt"
          
          # We check, if we have to perform some cleanup. 
          perform_cleanup=$(bash $github_workspace/scripts/build/check_cleanup.sh $file)
          if [ $perform_cleanup -eq 1 ]; then
            echo "Performing cleanup!"
            # Running the script in the docker container, as otherwise, we will have permission issues
            docker run --name ${{ github.run_id }}_${{ matrix.osversion }}_${{ matrix.runner_group }}_build -v $GITHUB_WORKSPACE:/nebulastream -v $cache_dir:/cache_dir -v $build_dir:/build_dir  --privileged --cap-add SYS_NICE --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-ccache-build-cleanup.sh nes_build_${{ matrix.osversion }}
            docker rm ${{ github.run_id }}_${{ matrix.osversion }}_${{ matrix.runner_group }}_build
            echo "Cleanup done!"
          else
            echo "We will not perform any cleanup!"
          fi

      - name: Build Docker
        id: builddocker
        continue-on-error: true
        working-directory: ${{ github.workspace }}/docker/buildImage
        run: docker build  -t nes_build_${{ matrix.osversion }} -f Dockerfile-NES-Build-${{ matrix.osversion }} .
      - name: Build Nebulastream
        # we build with ccache to this end, we reuse the cache_dir and the build_dir across multiple invocation of the ci.
        run: |
          GPU_RUNNER_PARAMS=""
          if [ "${{ matrix.runner_group }}" == "gpu" ]; then
            GPU_RUNNER_PARAMS="-v /usr/local/cuda:/usr/local/cuda:ro -v /usr/lib/nvidia:/usr/lib/nvidia:ro -e PATH=/usr/local/cuda/bin:${PATH} -e LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/nvidia:${LD_LIBRARY_PATH}"
          fi
          cache_dir="/data/nes-ci/tmp/nes-ccache_${{ matrix.osversion }}_${{ matrix.arch }}"
          echo "cache_dir=$cache_dir"
          mkdir -p $cache_dir
          RUNNER=$(basename $(dirname $(dirname $(dirname $(pwd)))))
          build_dir="/data/nes-ci/tmp/nes-build_$RUNNER_${RUNNER_NAME}_${{ matrix.osversion }}_${{ matrix.arch }}"
          echo "build_dir=$build_dir"
          mkdir -p $build_dir
          docker run --name ${{ github.run_id }}_${{ matrix.osversion }}_${{ matrix.runner_group }}_build -v $GITHUB_WORKSPACE:/nebulastream  -v $cache_dir:/cache_dir -v $build_dir:/build_dir -eRequireBuild=${{ matrix.require_build }} -eNesTestParallelism=${{ matrix.test_parallelism }} -eNesBuildParallelism=${{ matrix.build_parallelism }} --privileged --cap-add SYS_NICE $GPU_RUNNER_PARAMS --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-build.sh nes_build_${{ matrix.osversion }} ${{ matrix.runner_group }}
      - name: Run tests
        run: |
          GPU_RUNNER_PARAMS=""
          if [ "${{ matrix.runner_group }}" == "gpu" ]; then
            GPU_RUNNER_PARAMS="-v /usr/local/cuda:/usr/local/cuda:ro -v /usr/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:ro -e PATH=/usr/local/cuda/bin:${PATH} -e LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
          fi
          RUNNER=$(basename $(dirname $(dirname $(dirname $(pwd)))))
          build_dir="/data/nes-ci/tmp/nes-build_$RUNNER_${RUNNER_NAME}_${{ matrix.osversion }}_${{ matrix.arch }}"
          docker run --name ${{ github.run_id }}_${{ matrix.osversion }}_${{ matrix.runner_group }}_test -v $GITHUB_WORKSPACE:/nebulastream  -v $build_dir:/build_dir -eRequireTest=${{ matrix.require_test }} --privileged --cap-add SYS_NICE ${GPU_RUNNER_PARAMS} --entrypoint /nebulastream/docker/buildImage/entrypoint-nes-run-tests.sh nes_build_${{ matrix.osversion }} ${{ matrix.runner_group }}
        shell: bash
      - name: docker cleanup
        if: ${{ always() }}
        run: |
          docker rm -f ${{ github.run_id }}_${{ matrix.osversion }}_${{ matrix.runner_group }}_build
          docker rm -f ${{ github.run_id }}_${{ matrix.osversion }}_${{ matrix.runner_group }}_test
