name: NES PR CI

# The following pipeline is meant to run for every PR. It will not call any other workflow / pipeline.
# It will also apply the format check. If these steps are successful, it will try to build the PR and run the tests.
# In the future, we will add more automated checks to this pipeline, e.g., clang-tidy for our codebase or code coverage checks.
#
# If this pr is called with act, it has to be used with a custom event.json and called via `act -e event.json`.
# Otherwise, we are not running the job, as mentioned: https://github.com/nektos/act/issues/720

on:
  pull_request:
    # The ready_for_review event is used when a draft pr is changed into a non-draft version. If we did
    # not use the ready_for_review the ci would not be triggered and appear to have passed.
    types: [ ready_for_review, synchronize, opened, reopened ]

# cancel previous runs of same PR / branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validateTrigger:
    # This ensures we won't run the CI if it is in draft mode, or we called it via act.
    if: ${{ !github.event.pull_request.draft && !github.event.act }}
    runs-on: [ self-hosted, linux, Build ]
    steps:
      - uses: actions/checkout@v4
      - name: Contextual QA Checklists
        uses: wyozi/contextual-qa-checklist-action@1.3.2
        with:
          gh-token: ${{ secrets.NES_CI_SECRET }}
          comment-header: "Thank you for your PR. Please pay attention to the following items before merging:"

  detect-dependency-changes:
    # This job detects changes to files relevant for our dependency management by calculating a hash value
    # and looking for existing development images with the same hash.
    # If we find a development image matching the hash we skip building new docker images.
    # This job also determines the development image tag used for building and testing
    name: Detect changes to dependencies
    if: ${{ !github.event.act }}
    outputs:
      build-dependency: ${{steps.hash-and-lookup.outputs.build-dependency}}
      tag: ${{ steps.hash-and-lookup.outputs.tag }}
      hash: ${{ steps.hash-and-lookup.outputs.hash }}
    runs-on: [ self-hosted, linux, Build ]
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_SECRET }}
      - name: Calculate and lookup hash
        id: hash-and-lookup
        run: |
          # Compute the hash from files in vcpkg/ and docker/dependency/ directories
          echo "Calculating checksum for dependency files:"
          find vcpkg/ docker/dependency/ -type f
          
          HASH=$(find vcpkg/ docker/dependency/ -type f -exec sha256sum {} \; | sort -k 2 | cut -d ' ' -f1 | sha256sum | cut -d ' ' -f1)
          echo "Using Hash: $HASH"
          
          # Check if the Docker manifest exists for the computed hash
          if docker manifest inspect nebulastream/nes-development:"$HASH" > /dev/null 2>&1; then
            echo "build-dependency=false" >> "$GITHUB_OUTPUT"
          else
            echo "Require rebuilt of dependency"
            echo "build-dependency=true" >> "$GITHUB_OUTPUT"
          fi
          
          # Output the tag (hash) to GitHub Actions
          echo "tag=$HASH" >> "$GITHUB_OUTPUT"
          echo "hash=$HASH" >> "$GITHUB_OUTPUT"


  docker-development-images-pre:
    # We run the docker image build on separate machines and combine them into a single
    # multi-arch docker image in the docker-development-images job.
    # The Docker build uses a cache based on previous branch-specific images or the
    # main branch
    # This job builds a Base image which contains the llvm based toolchain and a recent
    # CMake version
    # The Dependency Image contains a pre-built sdk based on the vcpkg manifest
    # The Development Image contains the dependencies and additional tooling like clang-format.
    name: "Build Development Images"
    needs: [ detect-dependency-changes ]
    if: needs.detect-dependency-changes.outputs.build-dependency == 'true'
    runs-on: [ self-hosted, linux, Build, "${{ matrix.arch }}" ]
    strategy:
      fail-fast: false
      matrix:
        arch: [ x64, arm64 ]
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_SECRET }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Base Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }}-${{matrix.arch}}
          cache-to: type=registry,ref=nebulastream/nes-development-base-cache:${{ github.event.pull_request.head.ref }}-${{matrix.arch}},mode=max
          cache-from: |
            type=registry,ref=nebulastream/nes-development-base-cache:${{ github.event.pull_request.head.ref }}-${{matrix.arch}}
            type=registry,ref=nebulastream/nes-development-base-cache:latest-${{matrix.arch}}
          context: .
          file: docker/dependency/Base.dockerfile
      - name: Build Dependency Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: nebulastream/nes-development-dependency:${{ needs.detect-dependency-changes.outputs.tag }}-${{matrix.arch}}
          cache-to: type=registry,ref=nebulastream/nes-development-dependency-cache:${{ github.event.pull_request.head.ref }}-${{matrix.arch}},mode=max
          cache-from: |
            type=registry,ref=nebulastream/nes-development-dependency-cache:${{ github.event.pull_request.head.ref }}-${{matrix.arch}}
            type=registry,ref=nebulastream/nes-development-dependency-cache:latest-${{matrix.arch}}
          build-args: |
            TAG=${{ needs.detect-dependency-changes.outputs.tag }}-${{matrix.arch}}
            ARCH=${{matrix.arch}}
            VCPKG_DEPENDENCY_HASH=${{ needs.detect-dependency-changes.outputs.hash }}
          context: .
          file: docker/dependency/Dependency.dockerfile
      - name: Build Development Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: nebulastream/nes-development:${{ needs.detect-dependency-changes.outputs.tag }}-${{matrix.arch}}
          cache-to: type=registry,ref=nebulastream/nes-development-cache:${{ github.event.pull_request.head.ref }}-${{matrix.arch}},mode=max
          cache-from: |
            type=registry,ref=nebulastream/nes-development-cache:${{ github.event.pull_request.head.ref }}-${{matrix.arch}}
            type=registry,ref=nebulastream/nes-development-dependency-cache:latest-${{matrix.arch}}
          build-args: TAG=${{ needs.detect-dependency-changes.outputs.tag }}-${{matrix.arch}}
          context: .
          file: docker/dependency/Development.dockerfile

  docker-development-images:
    # This job merges arch specific images into a single multi-arch image
    name: "Merge images for different archs into a single Multi-arch image"
    needs: [ docker-development-images-pre, detect-dependency-changes ]
    if: needs.detect-dependency-changes.outputs.build-dependency == 'true'
    runs-on: [ self-hosted, linux, Build ]
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        if: ${{ !env.act }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_SECRET }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Combine Manifests
        run: |
          docker buildx imagetools create -t nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }} \
            nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }}-x64 \
            nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }}-arm64

          docker buildx imagetools create -t nebulastream/nes-development-dependency:${{ needs.detect-dependency-changes.outputs.tag }} \
            nebulastream/nes-development-dependency:${{ needs.detect-dependency-changes.outputs.tag }}-x64 \
            nebulastream/nes-development-dependency:${{ needs.detect-dependency-changes.outputs.tag }}-arm64

          docker buildx imagetools create -t nebulastream/nes-development:${{ needs.detect-dependency-changes.outputs.tag }} \
            nebulastream/nes-development:${{ needs.detect-dependency-changes.outputs.tag }}-x64 \
            nebulastream/nes-development:${{ needs.detect-dependency-changes.outputs.tag }}-arm64
          
          docker buildx imagetools create -t nebulastream/nes-development-base:${{ github.event.pull_request.head.ref }} \
            nebulastream/nes-development-base:${{ needs.detect-dependency-changes.outputs.tag }}
          
          docker buildx imagetools create -t nebulastream/nes-development-dependency:${{ github.event.pull_request.head.ref }} \
            nebulastream/nes-development-dependency:${{ needs.detect-dependency-changes.outputs.tag }}

          docker buildx imagetools create -t nebulastream/nes-development:${{ github.event.pull_request.head.ref }} \
            nebulastream/nes-development:${{ needs.detect-dependency-changes.outputs.tag }}
  

  check-format:
    needs: [ docker-development-images, detect-dependency-changes ]
    if: ${{ ! failure() && ! cancelled() }}
    runs-on: [ self-hosted, linux, Build ]
    container:
      image: nebulastream/nes-development:${{ needs.detect-dependency-changes.outputs.tag }}
      options: --user root
    steps:
      - uses: actions/checkout@v4
      - name: Configure CMake
        run: cmake -B build
      - name: Check Format Preamble
        run: cmake --build build --target check-format-preamble
      - name: Check Format Clang
        run: cmake --build build --target check-format-clang
      - name: Check Format Comment
        run: cmake --build build --target check-format-comment

  build-linux:
    name: "Build ${{matrix.arch}}"
    if: ${{ ! failure() && ! cancelled() }}
    needs: [ docker-development-images , detect-dependency-changes ]
    container:
      image: nebulastream/nes-development:${{ needs.detect-dependency-changes.outputs.tag }}
      volumes:
        - ccache:/ccache
      env:
        CCACHE_DIR: /ccache
      options: --user root
    timeout-minutes: 40
    runs-on: [ self-hosted, linux, Build, "${{matrix.arch}}" ]
    strategy:
      fail-fast: false
      matrix:
        arch: [ x64, arm64 ]
    steps:
      - uses: actions/checkout@v4
      - name: Configure NebulaStream
        run: cmake -GNinja -B build
      - name: Build NebulaStream
        run: cmake --build build -j -- -k 0
      - name: Run Tests
        run: ctest --test-dir build -j --output-on-failure --output-junit /junit.xml
      - name: Upload Test Summary
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() && !github.event.act }}
        with:
          name: junit-${{ matrix.arch }}.xml
          path: /junit.xml
