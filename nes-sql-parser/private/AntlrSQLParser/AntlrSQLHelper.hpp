/*
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#pragma once

#include <cstddef>
#include <memory>
#include <optional>
#include <string>
#include <utility>
#include <vector>
#include <Functions/FieldAccessLogicalFunction.hpp>
#include <Functions/LogicalFunction.hpp>
#include <Operators/Windows/Aggregations/WindowAggregationLogicalFunction.hpp>
#include <Operators/Windows/JoinLogicalOperator.hpp>
#include <Plans/LogicalPlan.hpp>
#include <Sinks/SinkDescriptor.hpp>
#include <WindowTypes/Types/WindowType.hpp>

namespace NES::Parsers
{

class AntlrSQLHelper
{
    using Projection = std::pair<std::optional<FieldIdentifier>, LogicalFunction>;
    std::vector<LogicalFunction> whereClauses; ///where and having clauses need to be accessed in reverse
    std::vector<LogicalFunction> havingClauses;
    std::string source;
    std::vector<Projection> projectionBuilder;

public:
    /// Constructors
    AntlrSQLHelper() = default;

    /// Query plans generated by antlr sql query parser.
    std::vector<LogicalPlan> queryPlans;

    /// Flags used to determine which token we are currently parsing.
    bool isSelect = false;
    bool isWhereOrHaving = false;
    bool isFrom = false;
    bool isWindow = false;
    bool isArithmeticBinary = false;
    bool isJoinRelation = false;
    bool isSimpleCondition = true;
    bool isTimeBasedWindow = true;
    bool isSetOperation = false;
    bool isGroupBy = false;
    bool hasMultipleAttributes = false;
    bool hasUnnamedAggregation = false;
    bool asterisk = false;

    [[nodiscard]] bool isInFunctionCall() const { return not functionBuilder.empty(); }

    [[nodiscard]] bool isInAggFunction() const { return not windowAggs.empty(); }

    /// Containers that hold state of specific objects that we create during parsing.
    std::shared_ptr<Windowing::WindowType> windowType;
    std::vector<std::shared_ptr<WindowAggregationLogicalFunction>> windowAggs;
    std::vector<SinkDescriptor> sinkDescriptor;
    std::vector<std::string> constantBuilder;
    std::vector<LogicalFunction> functionBuilder;
    std::vector<FieldAccessLogicalFunction> groupByFields;
    std::vector<std::string> joinSources;
    std::optional<LogicalFunction> joinFunction;
    std::vector<LogicalFunction> joinKeyRelationHelper;
    std::vector<std::string> joinSourceRenames;
    JoinLogicalOperator::JoinType joinType = JoinLogicalOperator::JoinType::INNER_JOIN;

    /// Utility variables to keep state between enter/exit parser function calls.
    size_t opBoolean{}; ///anonymous token enum in AntlrSQLLexer.h
    std::string opValue;
    std::string newSourceName;
    std::string timestamp;

    /// Utility variables used to keep track of the parsing state.
    int size{};
    int advanceBy{};
    size_t timeUnit{}; ///anonymous token enum in AntlrSQLLexer.h
    size_t timeUnitAdvanceBy{};
    std::optional<int> minimumCount;
    int implicitMapCountHelper = 0;

    [[nodiscard]] std::vector<LogicalFunction>& getWhereClauses();
    [[nodiscard]] std::vector<LogicalFunction>& getHavingClauses();
    [[nodiscard]] std::vector<Projection>& getProjections();

    void addWhereClause(LogicalFunction expressionNode);
    void addHavingClause(LogicalFunction expressionNode);
    void setSource(std::string sourceName);
    [[nodiscard]] const std::string getSource() const;
    void addProjection(std::optional<FieldIdentifier>, LogicalFunction);
};
}
